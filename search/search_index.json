{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Filter Framework Overview","text":"<p>The Filter Framework is a powerful and flexible system built into the FieldNation platform that provides standardized filtering, sorting, and display capabilities across various data types in the application.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The Filter Framework enables developers to create consistent interfaces for filtering, sorting, and displaying data throughout the FieldNation platform. It powers many list views, such as work orders, providers, custom fields, and more. The framework follows a component-based architecture that separates concerns between templates, plugins, and components.</p>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#templates","title":"Templates","text":"<p>Templates define the structure and default configuration for specific data types. They:</p> <ul> <li>Define default columns to display</li> <li>Configure available plugins</li> <li>Set default view modes (model, list, map, etc.)</li> <li>Handle pagination</li> <li>Manage saved filters/tabs</li> </ul> <p>Key classes: - <code>Filter\\Template\\AbstractTemplate</code> - Base template class with shared functionality - Template implementations like <code>Filter\\Template\\WorkOrdersAll</code>, <code>Filter\\Template\\CustomFields\\All</code>, etc.</p>"},{"location":"#plugins","title":"Plugins","text":"<p>Plugins implement the business logic for filtering and data retrieval. They:</p> <ul> <li>Define the available filters and sorting options</li> <li>Handle SQL query generation</li> <li>Implement filter application logic</li> <li>Connect to various data sources</li> </ul> <p>Key classes: - <code>Filter\\Plugin\\AbstractPlugin</code> - Base plugin class - Specialized implementations like <code>Filter\\Plugin\\WorkOrdersAll</code>, <code>Filter\\Plugin\\CustomFields\\All</code>, etc. - Model property classes (e.g., <code>Filter\\Plugin\\WorkOrderModelProperties\\CustomFields</code>) for reusable components</p>"},{"location":"#components","title":"Components","text":"<p>Components represent UI elements and behaviors within the filtering system:</p> <ul> <li>Displayable - Defines how data should be formatted and displayed</li> <li>Filterable - Defines filtering capabilities</li> <li>Sortable - Defines sorting capabilities</li> </ul> <p>Key classes: - <code>Filter\\Component\\AbstractComponent</code> - Base component class - <code>Filter\\Component\\Displayable</code> - Display component - <code>Filter\\Component\\Filterable</code> - Filter component - <code>Filter\\Component\\Sortable</code> - Sort component</p>"},{"location":"#data-flow","title":"Data Flow","text":"<ol> <li>A template is initialized for a specific data type (e.g., work orders, providers)</li> <li>The template loads associated plugins</li> <li>Plugins register components (displayable, filterable, sortable)</li> <li>When filtering is applied, the components generate SQL queries or API calls</li> <li>Results are processed through DataTranslators if needed</li> <li>Formatted data is returned to the UI</li> </ol>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Flexible Architecture: Easily extend and customize filters for different data types</li> <li>Chainable Filters: Apply multiple filters in sequence to refine results</li> <li>Multiple View Types: Support for list, model, map, and other view formats</li> <li>JSON Integration: Built-in JSON support for API responses</li> <li>Pagination: Automatic handling of result pagination</li> <li>Sorting: Built-in sorting capabilities</li> <li>User Preferences: Save and restore user filter preferences</li> <li>Export Functionality: Export filtered results in various formats</li> </ul>"},{"location":"#usage-examples","title":"Usage Examples","text":""},{"location":"#creating-a-new-filter-template","title":"Creating a New Filter Template","text":"<pre><code>namespace Filter\\Template;\n\nclass MyCustomTemplate extends AbstractTemplate\n{\n    protected $defaultView = 'model';\n    protected $plugins = array();\n    protected $mapType = 'custom';\n\n    public function init()\n    {\n        parent::init();\n        $this-&gt;plugins = array(\\Filter\\Plugin\\MyCustomPlugin::class =&gt; false);\n\n        $this-&gt;setDefaultColumns(array(\n            'id',\n            'name',\n            'description',\n            'status',\n        ));\n    }\n}\n</code></pre>"},{"location":"#creating-a-filter-plugin","title":"Creating a Filter Plugin","text":"<pre><code>namespace Filter\\Plugin;\n\nuse Filter\\Component;\n\nclass MyCustomPlugin extends AbstractPlugin\n{\n    public function init()\n    {\n        parent::init();\n\n        $this-&gt;add((new Component\\Filterable('Segment', 'MyCustomData'))\n            -&gt;setOrder(1)\n            -&gt;setAlwaysActive(true)\n        );\n\n        // Add more components...\n    }\n\n    public function filter()\n    {\n        // Implement filtering logic\n    }\n}\n</code></pre>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides access to the automatically generated API documentation for the FieldNation codebase.</p>"},{"location":"api-reference/#php-classes","title":"PHP Classes","text":"<p>Access the PHP class documentation below:</p> <ul> <li>FieldNation PHP API Documentation</li> </ul>"},{"location":"api-reference/#using-the-api-documentation","title":"Using the API Documentation","text":"<p>The documentation generated by Doxygen includes:</p> <ul> <li>Class hierarchies</li> <li>Class member listings</li> <li>Namespace information</li> <li>File references</li> <li>Function documentation</li> </ul> <p>You can navigate through the documentation using the sidebar navigation or search functionality.</p>"},{"location":"api-reference/#generated-with-mkdoxy","title":"Generated with MkDoxy","text":"<p>This documentation is automatically generated using MkDoxy, which integrates Doxygen with MkDocs.</p> <pre><code>/**\n * @doxy Class documentation examples\n * \n * Classes should be documented like this:\n * \n * @author Your Name\n * @brief Brief description\n * @details More detailed description\n */\nclass Example {\n    /**\n     * @brief Method documentation example\n     * @param string $param Parameter description\n     * @return bool Return value description\n     */\n    public function exampleMethod($param) {\n        return true;\n    }\n}\n</code></pre>"},{"location":"implementation-guide/","title":"Filter Framework Implementation Guide","text":"<p>This guide walks through the process of creating a new data view using the Filter Framework. You'll learn how to create templates, plugins, and model properties to build a complete feature.</p>"},{"location":"implementation-guide/#implementation-process-overview","title":"Implementation Process Overview","text":"<pre><code>graph TD\n    A[Define Requirements] --&gt; B[Create Template]\n    B --&gt; C[Create Plugin]\n    C --&gt; D[Create Model Properties]\n    D --&gt; E[Create Factory]\n    E --&gt; F[Register Route]\n    F --&gt; G[Create Controller]\n    G --&gt; H[Create View]\n    H --&gt; I[Test]</code></pre>"},{"location":"implementation-guide/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you understand: - The Filter Framework request lifecycle - The Component Model architecture - Basic PHP object-oriented programming</p>"},{"location":"implementation-guide/#implementation-steps","title":"Implementation Steps","text":""},{"location":"implementation-guide/#1-define-your-requirements","title":"1. Define Your Requirements","text":"<p>Start by clearly defining: - What data will be displayed - How it should be filtered - What sorting options are needed - Which views are required (list, model, map, etc.)</p>"},{"location":"implementation-guide/#2-create-a-template-class","title":"2. Create a Template Class","text":"<p>Templates define the high-level structure of your data view:</p> <ol> <li>Create a new PHP file in <code>modules/Filter/Template/</code> directory</li> <li>Define a class that extends <code>AbstractTemplate</code></li> <li>Implement the <code>init()</code> method</li> </ol> <pre><code>&lt;?php\nnamespace Filter\\Template;\n\nclass MyCustomData extends AbstractTemplate\n{\n    protected $defaultView = 'model';\n    protected $plugins = array();\n    protected $mapType = 'c'; // Custom identifier for map view\n\n    public function init()\n    {\n        parent::init();\n\n        // Register plugins\n        $this-&gt;plugins = array(\\Filter\\Plugin\\MyCustomData::class =&gt; false);\n\n        // Set default columns for list view\n        $this-&gt;setDefaultColumns(array(\n            'id',\n            'name',\n            'category',\n            'created_date',\n            'status',\n        ));\n\n        // Add help text\n        $this\n            -&gt;setHelpTitle('My Custom Data')\n            -&gt;setHelpCategory('My Category')\n            -&gt;setHelpDescription('View and filter custom data.');\n    }\n}\n</code></pre>"},{"location":"implementation-guide/#3-create-a-plugin-class","title":"3. Create a Plugin Class","text":"<p>Plugins handle the data querying and transformation:</p> <ol> <li>Create a new PHP file in <code>modules/Filter/Plugin/</code> directory</li> <li>Define a class that extends <code>AbstractPlugin</code></li> <li>Implement the <code>init()</code> and <code>filter()</code> methods</li> </ol> <pre><code>&lt;?php\nnamespace Filter\\Plugin;\n\nuse Filter\\Component;\n\nclass MyCustomData extends AbstractPlugin\n{\n    // Define optional components\n    protected $optionalComponents = array(\n        'details',\n        'history'\n    );\n\n    // Define model properties to use\n    protected $models = array();\n\n    public function init()\n    {\n        // Create model properties\n        $this-&gt;models = array(\n            new MyCustomDataModelProperties\\Base($this),\n            new MyCustomDataModelProperties\\Details($this),\n            new MyCustomDataModelProperties\\Status($this),\n        );\n\n        // Set up model and filters\n        $this-&gt;setupModel();\n        $this-&gt;setupFilters();\n\n        // Add segment filter\n        $this-&gt;add((new Component\\Filterable('Segment', 'My Custom Data'))\n            -&gt;setOrder(1)\n            -&gt;setAlwaysActive(true)\n        );\n\n        // Add status filter\n        $this-&gt;add((new Component\\Filterable('General', 'Status'))\n            -&gt;setCallable('post', function($enabled = false, $value = null) {\n                if ($enabled &amp;&amp; $value !== null) {\n                    $this-&gt;addWhere('c.status_id = :status_id');\n                    $this-&gt;addParam('status_id', $value);\n                }\n            })\n        );\n    }\n\n    protected function setupModel()\n    {\n        foreach ($this-&gt;models as $model) {\n            $model-&gt;modelComponents();\n        }\n\n        return $this;\n    }\n\n    protected function setupFilters()\n    {\n        foreach ($this-&gt;models as $model) {\n            $model-&gt;filterableComponents();\n        }\n\n        return $this;\n    }\n\n    public function filter()\n    {\n        // Build and execute the query to populate the result pool\n        $sql = sprintf(\n            \"SELECT\n                c.id AS id\n            FROM\n                my_custom_data c\n            %s\n            WHERE\n                c.company_id = :company_id\n            %s\n            %s\n            %s\",\n            $this-&gt;join(),\n            $this-&gt;where(),\n            $this-&gt;having(),\n            $this-&gt;order()\n        );\n\n        $stmt = $this-&gt;get('dbRo')-&gt;prepare($sql);\n        $stmt-&gt;bindValue('company_id', $this-&gt;get('companyId'), \\PDO::PARAM_INT);\n        $this-&gt;bindParams($stmt);\n        $stmt-&gt;execute();\n\n        $ids = array();\n        while ($row = $stmt-&gt;fetch(\\PDO::FETCH_ASSOC)) {\n            $ids[] = $row['id'];\n        }\n\n        $this-&gt;replacePool($ids);\n    }\n\n    public function gather()\n    {\n        $results = array();\n\n        if (!$this-&gt;getPool()) {\n            return $results;\n        }\n\n        $sql = sprintf(\n            \"SELECT\n                c.id AS id,\n                c.name AS name,\n                c.category_id AS category_id,\n                c.created_date AS created_date,\n                c.status_id AS status_id,\n                s.name AS status_name\n            FROM\n                my_custom_data c\n                LEFT JOIN status s ON s.id = c.status_id\n            %s\n            WHERE\n                c.id IN (%s)\n            %s\n            %s\n            %s\n            LIMIT %d OFFSET %d\",\n            $this-&gt;join(),\n            $this-&gt;escapeIds($this-&gt;getPool()),\n            $this-&gt;where(),\n            $this-&gt;having(),\n            $this-&gt;order(),\n            $this-&gt;getTemplate()-&gt;getResultsPerPage(),\n            $this-&gt;getTemplate()-&gt;getPaginationOffset()\n        );\n\n        $stmt = $this-&gt;get('dbRo')-&gt;prepare($sql);\n        $this-&gt;bindParams($stmt);\n        $stmt-&gt;execute();\n\n        while ($row = $stmt-&gt;fetch(\\PDO::FETCH_ASSOC)) {\n            $results[$row['id']] = $row;\n        }\n\n        return $results;\n    }\n\n    public function postProcess($id, array $row)\n    {\n        // Process each model\n        foreach ($this-&gt;models as $model) {\n            $row = $model-&gt;postProcess($id, $row);\n        }\n\n        return $row;\n    }\n}\n</code></pre>"},{"location":"implementation-guide/#4-create-model-property-classes","title":"4. Create Model Property Classes","text":"<p>Model properties organize related components:</p> <ol> <li>Create a new directory <code>modules/Filter/Plugin/MyCustomDataModelProperties</code></li> <li>Create model property classes for each domain concept</li> </ol> <pre><code>&lt;?php\nnamespace Filter\\Plugin\\MyCustomDataModelProperties;\n\nuse Filter\\Component;\n\nclass Base extends AbstractMyCustomDataModelProperty\n{\n    public function modelComponents()\n    {\n        // ID component\n        $this-&gt;add((new Component\\Displayable('Json', 'id'))\n            -&gt;setAlias('id')\n            -&gt;setCallable('json', $this-&gt;jsonInt('id'))\n        );\n\n        // Name component\n        $this-&gt;add((new Component\\Displayable('Json', 'name'))\n            -&gt;setAlias('name')\n            -&gt;setCallable('query', function() {\n                $this-&gt;addSelect('c.name AS name');\n            })\n            -&gt;setCallable('json', $this-&gt;jsonTrim('name'))\n        );\n\n        // Created date component\n        $this-&gt;add((new Component\\Displayable('Json', 'created_date'))\n            -&gt;setAlias('created_date')\n            -&gt;setCallable('query', function() {\n                $this-&gt;addSelect('c.created_date AS created_date');\n            })\n            -&gt;setCallable('json', function($row) {\n                return array(\n                    'created_date' =&gt; array(\n                        'date' =&gt; $row['created_date'],\n                        'formatted' =&gt; date('Y-m-d H:i:s', strtotime($row['created_date']))\n                    )\n                );\n            })\n        );\n    }\n\n    public function filterableComponents()\n    {\n        // Name filter\n        $this-&gt;add((new Component\\Filterable('Search', 'Name'))\n            -&gt;setCallable('post', function($enabled = false, $value = null) {\n                if ($enabled &amp;&amp; $value !== null) {\n                    $this-&gt;addWhere('c.name LIKE :name');\n                    $this-&gt;addParam('name', \"%$value%\");\n                }\n            })\n        );\n\n        // Date range filter\n        $this-&gt;add((new Component\\Filterable('Search', 'Date Range'))\n            -&gt;setCallable('post', function($enabled = false, $value = null) {\n                if ($enabled &amp;&amp; is_array($value)) {\n                    if (!empty($value['from'])) {\n                        $this-&gt;addWhere('c.created_date &gt;= :date_from');\n                        $this-&gt;addParam('date_from', $value['from'] . ' 00:00:00');\n                    }\n                    if (!empty($value['to'])) {\n                        $this-&gt;addWhere('c.created_date &lt;= :date_to');\n                        $this-&gt;addParam('date_to', $value['to'] . ' 23:59:59');\n                    }\n                }\n            })\n        );\n    }\n}\n</code></pre>"},{"location":"implementation-guide/#5-create-a-factory","title":"5. Create a Factory","text":"<p>Create a factory to instantiate your template:</p> <pre><code>&lt;?php\nnamespace Filter\\Factory\\Template;\n\nclass MyCustomData extends AbstractTemplate\n{\n    protected $className = 'MyCustomData';\n}\n</code></pre>"},{"location":"implementation-guide/#6-register-the-route","title":"6. Register the Route","text":"<p>Add a route to access your template:</p> <pre><code>// Add to modules/Filter/routes.php\nnew Route(\n    'my-custom-data/list',\n    array(\\Filter\\Controller\\MyCustomData::class, 'list'),\n    array(), array(), 2.0\n),\n</code></pre>"},{"location":"implementation-guide/#7-create-a-controller","title":"7. Create a Controller","text":"<p>Create a controller to handle the requests:</p> <pre><code>&lt;?php\nnamespace Filter\\Controller;\n\nuse FieldNation\\Framework\\Controller;\n\nclass MyCustomData extends Controller\n{\n    public function list()\n    {\n        $this-&gt;isRequired('VIEW_MY_CUSTOM_DATA');\n\n        $template = $this-&gt;bootstrapAngularFilterTemplate(\n            'Filter\\Template\\MyCustomData',\n            array(\n                'route' =&gt; '/my-custom-data/list',\n            )\n        );\n\n        return $this-&gt;render(\n            'my-custom-data/list.html.twig',\n            array(\n                'template' =&gt; $template,\n            ),\n            'layout/app.html.twig'\n        );\n    }\n}\n</code></pre>"},{"location":"implementation-guide/#8-create-twig-templates","title":"8. Create Twig Templates","text":"<p>Create the necessary Twig templates for rendering:</p> <pre><code>{# View/my-custom-data/list.html.twig #}\n{% extends layout %}\n\n{% block title %}My Custom Data{% endblock %}\n\n{% block content %}\n&lt;div class=\"my-custom-data\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-12\"&gt;\n            &lt;h1&gt;My Custom Data&lt;/h1&gt;\n\n            &lt;div ng-app=\"FilterApp\"&gt;\n                &lt;div ng-controller=\"FilterController\"&gt;\n                    &lt;div fn-filter=\"{{ template.route }}\" ng-model=\"filterData\"&gt;&lt;/div&gt;\n\n                    &lt;div class=\"results-container\"&gt;\n                        &lt;div ng-repeat=\"item in filterData.results\" class=\"result-item\"&gt;\n                            &lt;h3&gt;{{ \"{{ item.name }}\" }}&lt;/h3&gt;\n                            &lt;div class=\"details\"&gt;\n                                &lt;span class=\"status\"&gt;{{ \"{{ item.status.name }}\" }}&lt;/span&gt;\n                                &lt;span class=\"date\"&gt;{{ \"{{ item.created_date.formatted }}\" }}&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre>"},{"location":"implementation-guide/#9-add-frontend-javascript","title":"9. Add Frontend JavaScript","text":"<p>If needed, add JavaScript to enhance the user experience:</p> <pre><code>// Add to an appropriate JS file\n$(document).ready(function() {\n    // Initialize custom behavior for my-custom-data\n    $('.my-custom-data .result-item').on('click', function() {\n        // Handle click events\n    });\n});\n</code></pre>"},{"location":"implementation-guide/#testing-your-implementation","title":"Testing Your Implementation","text":"<ol> <li>Manual Testing:</li> <li>Access your route in the browser</li> <li>Test filtering and sorting</li> <li> <p>Verify data display and pagination</p> </li> <li> <p>API Testing:</p> </li> <li>Test the JSON output via API calls</li> <li>Verify filter parameters work as expected</li> <li> <p>Check performance with various result set sizes</p> </li> <li> <p>Unit Testing:</p> </li> <li>Write unit tests for your plugin logic</li> <li>Test model property transformations</li> <li>Test filter conditions</li> </ol>"},{"location":"implementation-guide/#advanced-customization","title":"Advanced Customization","text":""},{"location":"implementation-guide/#custom-view-types","title":"Custom View Types","text":"<p>To implement a custom view type:</p> <pre><code>// In your Template class:\npublic function myCustomView()\n{\n    // Generate custom view data\n    $data = $this-&gt;json();\n    $customData = array(/* transform data */);\n\n    return $customData;\n}\n</code></pre>"},{"location":"implementation-guide/#exporting-data","title":"Exporting Data","text":"<p>To enable data exports:</p> <pre><code>// In your Template class:\npublic function init()\n{\n    parent::init();\n    $this-&gt;setJsonExport(true);\n    // ...\n}\n</code></pre>"},{"location":"implementation-guide/#integration-with-other-services","title":"Integration with Other Services","text":"<p>To integrate with other services:</p> <pre><code>// In your Plugin class:\npublic function gather()\n{\n    $results = parent::gather();\n\n    // Enhance with data from other services\n    $service = $this-&gt;get('myService');\n    foreach ($results as &amp;$row) {\n        $row['additional_data'] = $service-&gt;getData($row['id']);\n    }\n\n    return $results;\n}\n</code></pre>"},{"location":"implementation-guide/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Memory Usage: Be careful with large result sets</li> <li>Performance: Optimize SQL queries and joins</li> <li>Reusing Components: Don't duplicate component definitions</li> <li>SQL Injection: Always use parameterized queries</li> <li>UI Consistency: Follow the existing UI patterns</li> <li>Session Management: Be aware of session state</li> </ol>"},{"location":"implementation-guide/#next-steps","title":"Next Steps","text":"<p>After implementing your filter framework components:</p> <ol> <li>Document your implementation</li> <li>Consider creating reusable components</li> <li>Add appropriate access controls</li> <li>Optimize for performance if needed</li> <li>Create user documentation for the new feature</li> </ol> <p>By following this guide, you should be able to create a fully functional data view using the Filter Framework that integrates seamlessly with the rest of the FieldNation system.</p>"},{"location":"appendix/framework-constants/","title":"Framework Constants","text":"<p>This file lists the constants used throughout the Filter Framework. Constants are essential for maintaining consistency and avoiding magic numbers or strings in the codebase.</p>"},{"location":"appendix/framework-constants/#constants","title":"Constants","text":""},{"location":"appendix/framework-constants/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>HTTP_OK</code>: 200</li> <li><code>HTTP_CREATED</code>: 201</li> <li><code>HTTP_NO_CONTENT</code>: 204</li> <li><code>HTTP_BAD_REQUEST</code>: 400</li> <li><code>HTTP_UNAUTHORIZED</code>: 401</li> <li><code>HTTP_FORBIDDEN</code>: 403</li> <li><code>HTTP_NOT_FOUND</code>: 404</li> <li><code>HTTP_INTERNAL_SERVER_ERROR</code>: 500</li> </ul>"},{"location":"appendix/framework-constants/#configuration-keys","title":"Configuration Keys","text":"<ul> <li><code>CONFIG_DATABASE</code>: 'database'</li> <li><code>CONFIG_CACHE</code>: 'cache'</li> <li><code>CONFIG_SESSION</code>: 'session'</li> <li><code>CONFIG_LOGGING</code>: 'logging'</li> </ul>"},{"location":"appendix/framework-constants/#default-values","title":"Default Values","text":"<ul> <li><code>DEFAULT_PAGE_SIZE</code>: 10</li> <li><code>DEFAULT_TIMEOUT</code>: 30</li> </ul>"},{"location":"appendix/framework-constants/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>APP_NAME</code>: 'Filter Framework'</li> <li><code>APP_VERSION</code>: '1.0.0'</li> <li><code>APP_ENV</code>: 'production'</li> </ul>"},{"location":"appendix/helpers-utilities/","title":"File: /filter-framework-docs/filter-framework-docs/docs/core-components/helpers-utilities.md","text":""},{"location":"appendix/helpers-utilities/#helpers-and-utilities-in-the-filter-framework","title":"Helpers and Utilities in the Filter Framework","text":"<p>The Filter Framework provides a set of helper functions and utilities that simplify common tasks and enhance the overall development experience. This document outlines the key helpers and utilities available in the framework.</p>"},{"location":"appendix/helpers-utilities/#overview","title":"Overview","text":"<p>Helpers and utilities are designed to streamline repetitive tasks, improve code readability, and promote best practices. They can be used throughout your application to handle various functionalities without the need to rewrite code.</p>"},{"location":"appendix/helpers-utilities/#common-helpers","title":"Common Helpers","text":""},{"location":"appendix/helpers-utilities/#string-helpers","title":"String Helpers","text":"<ul> <li><code>str_slug($string)</code>: Converts a string into a URL-friendly slug.</li> <li><code>str_limit($string, $limit)</code>: Truncates a string to a specified length.</li> </ul>"},{"location":"appendix/helpers-utilities/#array-helpers","title":"Array Helpers","text":"<ul> <li><code>array_get($array, $key)</code>: Retrieves a value from an array using a dot-notated key.</li> <li><code>array_set($array, $key, $value)</code>: Sets a value in an array using a dot-notated key.</li> </ul>"},{"location":"appendix/helpers-utilities/#url-helpers","title":"URL Helpers","text":"<ul> <li><code>url($path)</code>: Generates a full URL for the given path.</li> <li><code>route($name, $parameters)</code>: Generates a URL for a named route.</li> </ul>"},{"location":"appendix/helpers-utilities/#utility-functions","title":"Utility Functions","text":""},{"location":"appendix/helpers-utilities/#logging","title":"Logging","text":"<p>The framework includes a logging utility that allows you to log messages at different levels (info, warning, error). Use the following methods:</p> <ul> <li><code>log_info($message)</code>: Logs an informational message.</li> <li><code>log_error($message)</code>: Logs an error message.</li> </ul>"},{"location":"appendix/helpers-utilities/#configuration-management","title":"Configuration Management","text":"<p>Helpers for managing configuration settings:</p> <ul> <li><code>config($key)</code>: Retrieves a configuration value.</li> <li><code>set_config($key, $value)</code>: Sets a configuration value.</li> </ul>"},{"location":"appendix/helpers-utilities/#conclusion","title":"Conclusion","text":"<p>Utilizing the helpers and utilities provided by the Filter Framework can significantly enhance your development workflow. By leveraging these tools, you can write cleaner, more efficient code and focus on building robust applications.</p>"},{"location":"architecture/component-model/","title":"Filter Framework Component Model","text":"<p>The Component Model is a core architectural pattern in the Filter Framework that provides a flexible way to define, display, filter, and sort data. This document explains the component types, their usage, and best practices.</p>"},{"location":"architecture/component-model/#overview","title":"Overview","text":"<p>The Component Model separates the concerns of data representation, filtering, and sorting into distinct component types that work together to create a cohesive user experience. Components are registered by plugins and used by templates to render data and UI elements.</p>"},{"location":"architecture/component-model/#component-architecture","title":"Component Architecture","text":"<pre><code>classDiagram\n    class AbstractComponent {\n        +String id\n        +String group\n        +String name\n        +Integer order\n        +callables[]\n        +setAlias(String alias)\n        +setOrder(Integer order)\n        +setCallable(String type, Function fn)\n        +invokeCallable(String type, params)\n    }\n\n    class Displayable {\n        +Boolean selectable\n        +String[] aliases\n        +String[] binds\n        +Integer columnSize\n        +setSelectable(Boolean selectable)\n        +bind(String field)\n        +bindJson(Plugin plugin)\n    }\n\n    class Filterable {\n        +Boolean alwaysActive\n        +Boolean active\n        +Mixed values\n        +setAlwaysActive(Boolean active)\n        +setValues(Mixed values)\n        +isActive()\n    }\n\n    class Sortable {\n        +Boolean descending\n        +setDescending(Boolean desc)\n        +isDescending()\n    }\n\n    AbstractComponent &lt;|-- Displayable\n    AbstractComponent &lt;|-- Filterable\n    AbstractComponent &lt;|-- Sortable\n\n    class Plugin {\n        +add(AbstractComponent component)\n        +filter()\n        +gather()\n        +postProcess(id, row)\n    }\n\n    class ModelProperty {\n        +Plugin plugin\n        +modelComponents()\n        +filterableComponents()\n        +postProcess(id, row)\n    }\n\n    Plugin \"1\" *-- \"many\" ModelProperty\n    Plugin \"1\" *-- \"many\" AbstractComponent\n    ModelProperty \"1\" o-- \"many\" AbstractComponent</code></pre>"},{"location":"architecture/component-model/#component-types","title":"Component Types","text":""},{"location":"architecture/component-model/#1-displayable-components","title":"1. Displayable Components","text":"<p>Displayable components define how data should be presented to users, whether in tables, cards, or other UI elements.</p> <pre><code>$this-&gt;add((new Component\\Displayable('Work Order', 'Title'))\n    -&gt;setAlias('title')\n    -&gt;bind('$title')\n    -&gt;setColumnSize(250)\n    -&gt;bindJson($this)\n    -&gt;setCallable('plain', $this-&gt;plain('title', 'trim'))\n);\n</code></pre> <p>Key features: - Group/Name: Used for categorization and UI labeling - Alias: Used as the key in the JSON output - Binding: Connects the component to data fields - Callables: Functions for formatting or transforming data</p>"},{"location":"architecture/component-model/#2-filterable-components","title":"2. Filterable Components","text":"<p>Filterable components define how users can filter data. They produce UI controls and process filter inputs.</p> <pre><code>$this-&gt;add((new Component\\Filterable('Work Order', 'Status'))\n    -&gt;setCallable('post', function($enabled = false, $value = null) {\n        if ($enabled &amp;&amp; $value !== null) {\n            $this-&gt;addWhere('w.status_id = :status_id');\n            $this-&gt;addParam('status_id', $value);\n        }\n    })\n);\n</code></pre> <p>Key features: - Group/Name: Used for UI organization and labeling - Post Callable: Function that builds SQL conditions based on filter inputs - AlwaysActive: Option to make a filter always applied - Order: Controls the display order in the UI</p>"},{"location":"architecture/component-model/#3-sortable-components","title":"3. Sortable Components","text":"<p>Sortable components define how data can be sorted. They handle sort direction and SQL order clauses.</p> <pre><code>$this-&gt;add((new Component\\Sortable('Work Order', 'Date'))\n    -&gt;setAlias('date')\n    -&gt;setDescending()\n    -&gt;setCallable('pre', function ($asc) {\n        $this-&gt;addOrderBy('w.created_date', $asc);\n    })\n);\n</code></pre> <p>Key features: - Group/Name: Used for UI organization and labeling - Alias: Used as the sort parameter in URLs and JSON - Pre Callable: Function that builds SQL ORDER BY clauses - Descending: Sets the default sort direction</p>"},{"location":"architecture/component-model/#component-data-flow","title":"Component Data Flow","text":"<p>The following diagram illustrates how data flows through components during a request:</p> <pre><code>flowchart LR\n    A[Client Request] --&gt; B{Template}\n    B --&gt; C[Plugin]\n    C --&gt; D[Components]\n\n    subgraph Filter Processing\n        D --&gt; E[Filter Definition]\n        E --&gt; F[SQL WHERE Clauses]\n        F --&gt; G[Filtered Pool]\n    end\n\n    subgraph Data Gathering\n        G --&gt; H[SQL Query]\n        H --&gt; I[Raw Data]\n    end\n\n    subgraph Transformation\n        I --&gt; J[Post Processing]\n        J --&gt; K[Formatted Data]\n    end\n\n    K --&gt; L[JSON Response]\n    L --&gt; A</code></pre>"},{"location":"architecture/component-model/#component-registration-flow","title":"Component Registration Flow","text":"<p>Components are registered during the plugin initialization phase:</p> <ol> <li>Plugin's <code>init()</code> method is called</li> <li>For structured JSON output, <code>setupModel()</code> registers model components</li> <li><code>setupFilters()</code> registers filterable components</li> <li>For list views, <code>addListColumns()</code> registers displayable components</li> </ol>"},{"location":"architecture/component-model/#model-properties","title":"Model Properties","text":"<p>The Filter Framework uses Model Properties to organize components by domain:</p> <pre><code>$this-&gt;models = array(\n    new WorkOrderModelProperties\\WorkOrder($this),\n    new WorkOrderModelProperties\\Client($this),\n    new WorkOrderModelProperties\\Schedule($this),\n);\n</code></pre> <p>Each Model Property class encapsulates related components:</p> <pre><code>class Schedule extends AbstractWorkOrderModelProperty\n{\n    public function modelComponents()\n    {\n        $this-&gt;add((new Component\\Displayable('Json', 'schedule'))\n            -&gt;setAlias('schedule')\n            -&gt;bind('schedule_start')\n            -&gt;setCallable('query', array($this, 'activate'))\n        );\n    }\n}\n</code></pre> <p>This approach provides: - Better organization of components by domain - Reusability across different plugins - Clearer ownership of component logic</p>"},{"location":"architecture/component-model/#binding-and-aliases","title":"Binding and Aliases","text":"<p>Components use bindings and aliases to connect to data:</p> <ol> <li> <p>Binding: Connects a component to data fields in the query results    <pre><code>-&gt;bind('$title')\n</code></pre></p> </li> <li> <p>Aliases: Defines how the component appears in the output    <pre><code>-&gt;setAlias('title')\n</code></pre></p> </li> <li> <p>JSON Binding: Links a component to a specific plugin for data transformation    <pre><code>-&gt;bindJson($this)\n</code></pre></p> </li> </ol>"},{"location":"architecture/component-model/#callables","title":"Callables","text":"<p>Callables are functions that components use for various purposes:</p> <ol> <li> <p>Query Callables: Add SQL clauses to the query    <pre><code>-&gt;setCallable('query', function() {\n    $this-&gt;addSelect('w.title AS title');\n})\n</code></pre></p> </li> <li> <p>Plain Callables: Format data for display    <pre><code>-&gt;setCallable('plain', function($row) {\n    return htmlspecialchars($row['title']);\n})\n</code></pre></p> </li> <li> <p>JSON Callables: Transform data for JSON output    <pre><code>-&gt;setCallable('json', function($row) {\n    return array('title' =&gt; $row['title']);\n})\n</code></pre></p> </li> <li> <p>Post Callables: Process filter inputs    <pre><code>-&gt;setCallable('post', function($enabled, $value) {\n    if ($enabled &amp;&amp; $value) {\n        $this-&gt;addWhere('w.title LIKE :title');\n        $this-&gt;addParam('title', \"%$value%\");\n    }\n})\n</code></pre></p> </li> </ol>"},{"location":"architecture/component-model/#component-lifecycle","title":"Component Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Registration: Plugin init()\n\n    Registration --&gt; Activation: User selects filter\n    Activation --&gt; QueryBuilding: generateSQL\n    Activation --&gt; FilterProcessing: post()\n\n    QueryBuilding --&gt; DataGathering: gather()\n    FilterProcessing --&gt; DataGathering\n\n    DataGathering --&gt; PostProcessing: postProcess()\n    PostProcessing --&gt; OutputGeneration: JSON/HTML\n\n    OutputGeneration --&gt; [*]</code></pre> <p>Components participate in various stages of the request lifecycle:</p> <ol> <li>Registration: Components are added during plugin initialization</li> <li>Filter Processing: Filterable components process user inputs</li> <li>Query Building: Components add SQL clauses to the query</li> <li>Data Gathering: The query is executed and raw data is collected</li> <li>Post-Processing: Data is transformed according to component specifications</li> <li>Output Generation: Components determine the structure of the output</li> </ol>"},{"location":"architecture/component-model/#best-practices","title":"Best Practices","text":"<p>When working with components:</p> <ol> <li>Group Related Components: Use consistent group names for related components</li> <li>Reuse Model Properties: Create model property classes for reusable component groups</li> <li>Keep Callables Focused: Each callable should have a single responsibility</li> <li>Use Explicit Bindings: Clearly indicate which data fields a component uses</li> <li>Consider UI Impact: Remember that components affect both data and UI presentation</li> <li>Performance: Use careful SQL joins and conditions in query callables</li> <li>Security: Always parameterize SQL conditions in post callables</li> </ol>"},{"location":"architecture/component-model/#common-patterns","title":"Common Patterns","text":""},{"location":"architecture/component-model/#data-transformation","title":"Data Transformation","text":"<pre><code>-&gt;setCallable('json', function($row) {\n    // Transform data for JSON output\n    return array(\n        'id' =&gt; (int)$row['id'],\n        'formatted_date' =&gt; date('Y-m-d', strtotime($row['date'])),\n    );\n})\n</code></pre>"},{"location":"architecture/component-model/#conditional-display","title":"Conditional Display","text":"<pre><code>-&gt;setCallable('json', function($row) {\n    // Only include data if a condition is met\n    if ($row['has_permission']) {\n        return array('sensitive_data' =&gt; $row['data']);\n    }\n    return array();\n})\n</code></pre>"},{"location":"architecture/component-model/#building-complex-filters","title":"Building Complex Filters","text":"<pre><code>-&gt;setCallable('post', function($enabled, $value) {\n    if ($enabled &amp;&amp; $value) {\n        if (is_array($value)) {\n            $this-&gt;addWhere('w.status_id IN (:status_ids)');\n            $this-&gt;addParam('status_ids', $value, \\PDO::PARAM_INT_ARRAY);\n        } else {\n            $this-&gt;addWhere('w.status_id = :status_id');\n            $this-&gt;addParam('status_id', $value);\n        }\n    }\n})\n</code></pre>"},{"location":"architecture/component-model/#advanced-topics","title":"Advanced Topics","text":""},{"location":"architecture/component-model/#component-callbacks","title":"Component Callbacks","text":"<p>Components can register callbacks for specific events:</p> <pre><code>-&gt;setOnActivate(function() {\n    // Called when the component is activated\n})\n</code></pre>"},{"location":"architecture/component-model/#always-active-components","title":"Always Active Components","text":"<p>Some components are always active regardless of user selection:</p> <pre><code>-&gt;setAlwaysActive(true)\n</code></pre>"},{"location":"architecture/component-model/#view-specific-components","title":"View-Specific Components","text":"<p>Components can be specific to certain views:</p> <pre><code>if ($this-&gt;getTemplate()-&gt;getView() == 'list') {\n    // Add list-specific components\n}\n</code></pre>"},{"location":"architecture/component-model/#component-selection","title":"Component Selection","text":"<p>Components can be marked as selectable by users:</p> <pre><code>-&gt;setSelectable(true)\n</code></pre>"},{"location":"architecture/component-model/#component-orders","title":"Component Orders","text":"<p>Control the display order of components:</p> <pre><code>-&gt;setOrder(10)\n</code></pre> <p>By understanding and leveraging the Component Model, developers can create rich, interactive data views that are both performant and maintainable.</p>"},{"location":"architecture/directory-structure/","title":"Directory Structure","text":"<p>The Filter Framework follows a well-organized directory structure that separates different components into logical groups. Understanding this structure will help you navigate the codebase and locate the relevant files when working with the framework.</p>"},{"location":"architecture/directory-structure/#core-framework-structure","title":"Core Framework Structure","text":"<pre><code>modules/Filter/\n\u251c\u2500\u2500 Assets/             # Frontend assets for filter UI components\n\u251c\u2500\u2500 Component/          # Component classes that build filter UI elements\n\u2502   \u251c\u2500\u2500 AbstractComponent.php    # Base component class\n\u2502   \u251c\u2500\u2500 Displayable.php          # Components for displaying data\n\u2502   \u251c\u2500\u2500 Filterable.php           # Components for filtering data\n\u2502   \u2514\u2500\u2500 Sortable.php             # Components for sorting data\n\u251c\u2500\u2500 Controller/         # Controllers that handle filter routes\n\u251c\u2500\u2500 Factory/            # Service factories for dependency injection\n\u251c\u2500\u2500 Model/              # Data models used by filter components\n\u251c\u2500\u2500 Plugin/             # Filter plugins for different data types\n\u2502   \u251c\u2500\u2500 AbstractPlugin.php          # Base plugin class\n\u2502   \u251c\u2500\u2500 AbstractTemplates.php       # Template handling base class\n\u2502   \u251c\u2500\u2500 AbstractUsers.php           # User filtering base class\n\u2502   \u251c\u2500\u2500 AbstractWorkOrders.php      # Work order filtering base class\n\u2502   \u2514\u2500\u2500 ...                         # Specific implementations\n\u251c\u2500\u2500 Service/            # Services that implement filter functionality\n\u251c\u2500\u2500 Template/           # Filter templates\n\u2502   \u251c\u2500\u2500 AbstractTemplate.php     # Base template class\n\u2502   \u2514\u2500\u2500 ...                      # Specific template implementations\n\u251c\u2500\u2500 Traits/             # Reusable trait functionality\n\u2502   \u251c\u2500\u2500 Displayable.php          # Display-related functionality\n\u2502   \u251c\u2500\u2500 Pool.php                 # Result pool management\n\u2502   \u251c\u2500\u2500 Post.php                 # Post data handling\n\u2502   \u2514\u2500\u2500 ...                      # Other traits\n\u2514\u2500\u2500 View/               # View templates for rendering filters\n</code></pre>"},{"location":"architecture/filter-components/","title":"Filter Components","text":"<p>Filter Components are the building blocks used to construct filter interfaces and processing logic in the FieldNation filter framework. They encapsulate specific filtering capabilities that can be assembled into templates.</p>"},{"location":"architecture/filter-components/#component-types","title":"Component Types","text":""},{"location":"architecture/filter-components/#filterable-components-componentfilterable","title":"Filterable Components (<code>Component\\Filterable</code>)","text":"<ul> <li>Define input fields for users to filter data</li> <li>Handle UI representation of filter controls</li> <li>Process filter values and modify queries</li> <li>Examples:</li> <li>Location filter (<code>fProviderNear</code>)</li> <li>Date range filter (<code>fDateRange</code>) </li> <li>Status filter (<code>fStatus</code>)</li> </ul>"},{"location":"architecture/filter-components/#displayable-components-componentdisplayable","title":"Displayable Components (<code>Component\\Displayable</code>)","text":"<ul> <li>Define output fields that should be shown in results</li> <li>Handle data transformation for display</li> <li>Convert raw database values to formatted outputs</li> <li>Examples:</li> <li>Work order ID column (<code>dWorkorderId</code>)</li> <li>Provider name column (<code>dProviderName</code>)</li> <li>Location column (<code>dLocation</code>)</li> </ul>"},{"location":"architecture/filter-components/#sortable-components-componentsortable","title":"Sortable Components (<code>Component\\Sortable</code>)","text":"<ul> <li>Enable sorting capability for specific fields</li> <li>Handle both ascending and descending sort orders</li> <li>Generate appropriate SQL ORDER BY clauses</li> <li>Examples:</li> <li>Date sort (<code>sDate</code>)</li> <li>Name sort (<code>sName</code>)</li> <li>Rating sort (<code>sRating</code>)</li> </ul>"},{"location":"architecture/filter-components/#abstract-component-base-abstractcomponent","title":"Abstract Component Base (<code>AbstractComponent</code>)","text":"<ul> <li>Provides common functionality for all component types</li> <li>Handles component registration, identification, and binding</li> <li>Manages callbacks through the callable pattern</li> </ul>"},{"location":"architecture/filter-components/#component-structure","title":"Component Structure","text":"<p>Each component has the following key elements:</p>"},{"location":"architecture/filter-components/#identification","title":"Identification","text":"<ul> <li>ID: Auto-generated unique identifier</li> <li>Aliases: User-friendly names for the component</li> <li>Group/Label: UI categorization for organizing components</li> </ul>"},{"location":"architecture/filter-components/#data-binding","title":"Data Binding","text":"<ul> <li>Binds: Data sources the component connects to</li> <li>JSON Path: Location in the JSON response where data appears</li> <li>Selectable: Whether the component can be selected in column pickers</li> </ul>"},{"location":"architecture/filter-components/#event-handlers","title":"Event Handlers","text":"<ul> <li>Callables: Functions that handle different aspects of the component:</li> <li><code>query</code>: Modifies SQL queries during data gathering</li> <li><code>json</code>: Transforms data for JSON output</li> <li><code>plain</code>: Formats data for plain text display</li> <li><code>post</code>: Processes incoming filter values</li> <li><code>pre</code>: Runs before main filtering logic</li> <li><code>info</code>: Generates human-readable filter description</li> </ul>"},{"location":"architecture/filter-components/#component-registration","title":"Component Registration","text":"<p>Components are typically registered in a plugin's <code>init()</code> method:</p> <pre><code>$this-&gt;add((new Component\\Filterable('Work Order', 'Status'))\n    -&gt;setAlias('status')\n    -&gt;setCallable('post', function($value) {\n        if ($value) {\n            $this-&gt;addWhere('w.status_id = :status_id', array('status_id' =&gt; $value));\n        }\n    })\n    -&gt;setCallable('info', function($value) {\n        if ($value) {\n            return 'Status: ' . $this-&gt;getStatusName($value);\n        }\n    })\n);\n</code></pre>"},{"location":"architecture/filter-components/#extending-components","title":"Extending Components","text":"<p>To create a new component type:</p> <ol> <li>Extend one of the base component classes (<code>Filterable</code>, <code>Displayable</code>, <code>Sortable</code>)</li> <li>Register your component with a plugin using <code>$this-&gt;add()</code></li> <li>Implement the necessary callbacks to handle filter behavior</li> <li>Add appropriate view scripts if needed for UI rendering</li> </ol>"},{"location":"architecture/filter-components/#best-practices","title":"Best Practices","text":"<ol> <li>Consistent Naming: Use prefixes to identify component types:</li> <li><code>f</code> for Filterable components</li> <li><code>d</code> for Displayable components</li> <li> <p><code>s</code> for Sortable components</p> </li> <li> <p>Reusable Components: Design components for reuse across multiple templates</p> </li> <li> <p>Performance: Optimize SQL generation in query callables</p> </li> <li> <p>User Experience: Provide clear labels and descriptions for filters</p> </li> <li> <p>Data Validation: Validate filter inputs to prevent injection attacks</p> </li> </ol>"},{"location":"architecture/filter-plugins/","title":"Filter Plugins","text":"<p>Plugins implement the actual filtering logic applied to datasets in the FieldNation filter framework. They connect templates to data sources and execute filtering operations based on user input.</p>"},{"location":"architecture/filter-plugins/#plugin-system-architecture","title":"Plugin System Architecture","text":""},{"location":"architecture/filter-plugins/#abstractplugin-base","title":"AbstractPlugin Base","text":"<p>All plugins extend the <code>AbstractPlugin</code> base class or one of its specialized subclasses:</p> <ul> <li><code>AbstractPlugin</code>: Core base class with fundamental plugin functionality</li> <li><code>AbstractTemplates</code>: Specialized for template-related filtering</li> <li><code>AbstractTemplatesLegacy</code>: Support for legacy template filtering</li> <li><code>AbstractThread</code>: Specialized for conversation/message filtering</li> </ul> <p>The base classes provide methods for: - Initialization and configuration - Filter application and data gathering - Component registration and management - SQL query construction</p>"},{"location":"architecture/filter-plugins/#plugin-types","title":"Plugin Types","text":"<p>Plugins are categorized by their purpose and domain:</p>"},{"location":"architecture/filter-plugins/#basic-domain-plugins","title":"Basic Domain Plugins","text":"<ul> <li>Work Order plugins (<code>WorkOrdersAll</code>, <code>WorkOrdersAssigned</code>)</li> <li>Provider plugins (<code>Providers</code>, <code>VendorsProviders</code>)</li> <li>Project plugins (<code>Projects\\Active</code>, <code>Projects\\All</code>)</li> </ul>"},{"location":"architecture/filter-plugins/#model-property-plugins","title":"Model Property Plugins","text":"<ul> <li><code>WorkOrderModelProperties</code>: Handle specific aspects of work order data</li> <li><code>TemplateModelProperties</code>: Process template-specific data</li> <li><code>ProjectModelProperties</code>: Handle project-specific data</li> <li><code>CustomFieldModelProperties</code>: Process custom field data</li> </ul>"},{"location":"architecture/filter-plugins/#specialized-functionality-plugins","title":"Specialized Functionality Plugins","text":"<ul> <li><code>TemporaryTableCreate</code>: Creates temporary tables for efficient filtering</li> <li><code>TemporaryTableFetch</code>: Retrieves data from temporary tables</li> <li><code>Keywords</code>: Handles keyword-based searching</li> <li><code>Location</code>: Processes location-based filtering</li> </ul>"},{"location":"architecture/filter-plugins/#plugin-component-registration","title":"Plugin Component Registration","text":"<p>Plugins register components during initialization:</p> <pre><code>public function init()\n{\n    parent::init();\n\n    // Register a filterable component\n    $this-&gt;add((new Component\\Filterable('Work Order', 'Status'))\n        -&gt;setAlias('status')\n        -&gt;setCallable('post', function($value) {\n            if ($value) {\n                $this-&gt;addWhere('w.status_id = :status_id', ['status_id' =&gt; $value]);\n            }\n        })\n    );\n\n    // Register a displayable component\n    $this-&gt;add((new Component\\Displayable('Work Order', 'Id'))\n        -&gt;setAlias('id')\n        -&gt;setCallable('json', function($row) {\n            return ['id' =&gt; (int)$row['id']];\n        })\n        -&gt;setCallable('plain', $this-&gt;plain('id', 'intval'))\n    );\n}\n</code></pre>"},{"location":"architecture/filter-plugins/#key-plugin-methods","title":"Key Plugin Methods","text":""},{"location":"architecture/filter-plugins/#init","title":"<code>init()</code>","text":"<ul> <li>Sets up the plugin's components</li> <li>Configures default behaviors</li> <li>Establishes relationships with other plugins</li> </ul>"},{"location":"architecture/filter-plugins/#filter","title":"<code>filter()</code>","text":"<ul> <li>Applies filtering logic to the data pool</li> <li>Constructs SQL WHERE clauses based on active filters</li> <li>Updates the pool of IDs that match filter criteria</li> </ul>"},{"location":"architecture/filter-plugins/#gather","title":"<code>gather()</code>","text":"<ul> <li>Retrieves filtered data for display</li> <li>Constructs complex SQL queries with JOINs and subqueries</li> <li>Transforms raw data into the expected format</li> </ul>"},{"location":"architecture/filter-plugins/#postprocess","title":"<code>postProcess()</code>","text":"<ul> <li>Performs final transformations on gathered data</li> <li>Applies any post-filter logic</li> <li>Prepares data for rendering</li> </ul>"},{"location":"architecture/filter-plugins/#sql-query-construction","title":"SQL Query Construction","text":"<p>Plugins provide several helper methods for SQL construction:</p> <pre><code>// Add a JOIN clause\n$this-&gt;addJoin(\"LEFT JOIN workorder_custom_fields wcf ON wcf.workorder_id = w.workorder_id\", 'wcf');\n\n// Add a WHERE condition\n$this-&gt;addWhere(\"w.status_id IN (:status_ids)\", ['status_ids' =&gt; $statusIds]);\n\n// Add an ORDER BY clause\n$this-&gt;addOrderBy(\"w.created_at\", false); // false = descending\n\n// Add a HAVING clause\n$this-&gt;addHaving(\"COUNT(r.request_id) &gt; 0\");\n</code></pre>"},{"location":"architecture/filter-plugins/#plugin-registration-with-templates","title":"Plugin Registration with Templates","text":"<p>Plugins are registered with templates in the template's <code>init()</code> method:</p> <pre><code>protected $plugins = array(\n    \\Filter\\Plugin\\WorkOrdersAll::class =&gt; false,\n    \\Filter\\Plugin\\Workorder\\Keywords::class =&gt; false,\n);\n</code></pre> <p>The array key is the plugin class, and the value is typically <code>false</code> (may be used for configuration flags).</p>"},{"location":"architecture/filter-plugins/#data-flow-between-plugins","title":"Data Flow Between Plugins","text":"<ol> <li>Each plugin's <code>filter()</code> method is called in sequence</li> <li>The ID pool is passed between plugins, progressively refined</li> <li>The final pool represents IDs that match all active filters</li> <li>Each plugin's <code>gather()</code> method retrieves detailed data for matching IDs</li> </ol>"},{"location":"architecture/filter-plugins/#extending-the-plugin-system","title":"Extending the Plugin System","text":"<p>To create a new plugin:</p> <ol> <li> <p>Create a Plugin Class:    <pre><code>namespace Filter\\Plugin;\n\nclass MyCustomFilter extends AbstractPlugin\n{\n    // Implementation\n}\n</code></pre></p> </li> <li> <p>Implement Required Methods:</p> </li> <li><code>init()</code>: Register components</li> <li><code>filter()</code>: Apply filtering logic</li> <li> <p><code>gather()</code>: Retrieve and process data</p> </li> <li> <p>Register with Templates:    <pre><code>protected $plugins = array(\n    \\Filter\\Plugin\\MyCustomFilter::class =&gt; false,\n);\n</code></pre></p> </li> </ol>"},{"location":"architecture/filter-services/","title":"Filter Services","text":"<p>Filter Services connect the filter framework to the broader application architecture in FieldNation. They provide access to data sources, handle authentication, and integrate with other services.</p>"},{"location":"architecture/filter-services/#service-integration-architecture","title":"Service Integration Architecture","text":""},{"location":"architecture/filter-services/#service-manager-integration","title":"Service Manager Integration","text":"<p>The filter framework integrates with the application's service manager:</p> <pre><code>// Access a service from a template or plugin\n$service = $this-&gt;get('serviceName');\n</code></pre> <p>Key services used by the filter framework:</p> <ul> <li>dbRo: Read-only database connection service</li> <li>db: Read-write database connection service</li> <li>context: Current request context</li> <li>userId: Current user ID</li> <li>companyId: Current company ID</li> <li>twig: Templating engine</li> </ul>"},{"location":"architecture/filter-services/#database-services","title":"Database Services","text":"<p>Database services provide standardized access to the database:</p> <pre><code>// Example of a database query in a plugin\n$stmt = $this-&gt;get('dbRo')-&gt;prepare($sql);\n$stmt-&gt;execute($this-&gt;params());\nwhile ($row = $stmt-&gt;fetch(PDO::FETCH_ASSOC)) {\n    $rows[(int)$row['id']] = $row;\n}\n</code></pre> <p>Database services handle: - Connection pooling - Query preparation - Parameter binding - Transaction management - Error handling</p>"},{"location":"architecture/filter-services/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>The filter framework integrates with authentication services:</p> <pre><code>// Check if the user has access to the requested resource\n$this-&gt;isGranted('ROLE_ADMIN');\n</code></pre> <p>Authorization concerns: - Role-based access control - Company-based access restrictions - Feature availability based on subscription - Data visibility rules</p>"},{"location":"architecture/filter-services/#key-services-used-by-the-filter-framework","title":"Key Services Used by the Filter Framework","text":""},{"location":"architecture/filter-services/#contracts-service","title":"Contracts Service","text":"<p>Provides information about company contracts and enabled features:</p> <pre><code>$contract = $this-&gt;get('companyContract');\nif (Contracts::isFeatureEnabled($contract, 'projects')) {\n    // Enable project-related features\n}\n</code></pre>"},{"location":"architecture/filter-services/#data-translator-service","title":"Data Translator Service","text":"<p>Transforms data between different formats:</p> <pre><code>$translatedData = $this-&gt;get(\\DataTranslator\\Workorder::class)\n    -&gt;convert('restV2', $originalData, 'template');\n</code></pre>"},{"location":"architecture/filter-services/#context-service","title":"Context Service","text":"<p>Provides information about the current request:</p> <pre><code>$request = $this-&gt;get('context')-&gt;getRequest();\n$isApiRequest = isset($request['is_api']);\n</code></pre>"},{"location":"architecture/filter-services/#export-service","title":"Export Service","text":"<p>Handles exporting filtered data:</p> <pre><code>$exportService = $this-&gt;get('exportService');\n$exportService-&gt;createExport($data, $format);\n</code></pre>"},{"location":"architecture/filter-services/#event-integration","title":"Event Integration","text":"<p>The filter framework publishes and subscribes to application events:</p>"},{"location":"architecture/filter-services/#broadcasting-events","title":"Broadcasting Events","text":"<pre><code>// Broadcast an event when filters are applied\n$rootScope.$broadcast('fetchedFilter' + attrs['ngModel'], filterObject);\n</code></pre>"},{"location":"architecture/filter-services/#subscribing-to-events","title":"Subscribing to Events","text":"<pre><code>// Listen for events in the Angular directive\nscope.$on('renderFilter' + attrs['ngModel'], function(event) {\n    ngModel.$render();\n});\n</code></pre> <p>Common events: - <code>fetchFilter</code>: Before fetching filtered data - <code>fetchedFilter</code>: After filtered data is retrieved - <code>setupModel</code>: Model initialization - <code>renderFilter</code>: UI rendering - <code>refreshListTable</code>: Refreshing the UI</p>"},{"location":"architecture/filter-services/#restful-api-integration","title":"RESTful API Integration","text":"<p>The filter framework provides RESTful API endpoints:</p> <pre><code>// From RestfulGateway.php\n$path = 'Filter\\Template\\\\' . implode('\\\\', array_map(function($a) {\n    return ucfirst($a);\n}, explode('_', $this-&gt;getModel())));\n\nif (!$template = $this-&gt;get($path)) {\n    $this-&gt;error('No template exists by the name given.');\n}\n\n$result = $template\n    -&gt;setJsonExport()\n    -&gt;post($params)\n    -&gt;json();\n</code></pre> <p>API features: - JSON response format - Pagination headers - Filter state persistence - Error handling</p>"},{"location":"architecture/filter-services/#angular-integration-services","title":"Angular Integration Services","text":"<p>The filter framework integrates with Angular through services:</p> <pre><code>// Example of Angular service integration\nangular.module('filterResults', ['scrollTable'])\n    .directive('filterList', ['$http', '$q', '$interval', '$uibModal', '$rootScope', \n    function($http, $q, $interval, $uibModal, $rootScope) {\n        // Directive implementation\n    }]);\n</code></pre> <p>Angular services provide: - HTTP request handling - UI components (modals, tables) - Event broadcasting - Data transformation</p>"},{"location":"architecture/filter-services/#best-practices","title":"Best Practices","text":""},{"location":"architecture/filter-services/#service-dependency","title":"Service Dependency","text":"<ol> <li>Explicit Dependencies:</li> <li>Clearly document service dependencies</li> <li>Use dependency injection wherever possible</li> <li> <p>Avoid direct instantiation of services</p> </li> <li> <p>Service Access Patterns:</p> </li> <li>Use the <code>get()</code> method to access services</li> <li>Cache service instances when appropriate</li> <li>Handle service unavailability gracefully</li> </ol>"},{"location":"architecture/filter-services/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Database Services:</li> <li>Use read-only connections for queries</li> <li>Apply pagination early to limit result sets</li> <li> <p>Consider temporary tables for complex queries</p> </li> <li> <p>Caching Strategies:</p> </li> <li>Cache frequently-used service responses</li> <li>Invalidate cache when underlying data changes</li> <li>Use appropriate cache expiration policies</li> </ol>"},{"location":"architecture/filter-services/#error-handling","title":"Error Handling","text":"<ol> <li>Service Exceptions:</li> <li>Catch and handle service exceptions appropriately</li> <li>Provide meaningful error messages to users</li> <li> <p>Log detailed error information for debugging</p> </li> <li> <p>Graceful Degradation:</p> </li> <li>Handle service unavailability gracefully</li> <li>Provide fallback behavior when services fail</li> <li>Communicate service issues to users when appropriate</li> </ol>"},{"location":"architecture/filter-templates/","title":"Filter Templates","text":"<p>Filter Templates provide pre-configured filtering environments for specific data types and views. They combine plugins, components, and configuration to create complete filtering solutions for the FieldNation platform.</p>"},{"location":"architecture/filter-templates/#template-architecture","title":"Template Architecture","text":""},{"location":"architecture/filter-templates/#abstracttemplate-base","title":"AbstractTemplate Base","text":"<p>All templates extend <code>AbstractTemplate</code>, which provides:</p> <ul> <li>Core methods for initialization, processing, and rendering</li> <li>Integration points for plugins and components</li> <li>Configuration options for views and default behavior</li> <li>Methods for pagination, sorting, and result formatting</li> </ul> <p>The base class integrates various traits:</p> <ul> <li><code>Traits\\Pagination</code>: Handles result pagination</li> <li><code>Traits\\User</code>: Provides user-related functionality</li> <li><code>\\Filter\\Traits\\Displayable</code>: Manages columns for display for a single item</li> <li><code>\\Filter\\Traits\\Pool</code>: Manages the ID pool for filtered results</li> <li><code>\\Filter\\Traits\\Post</code>: Processes POST data for filtering</li> <li><code>\\Filter\\Traits\\Tabs</code>: Handles saved user filter tabs</li> <li><code>\\Filter\\Traits\\Info</code>: Information string describing plugins applied</li> <li><code>\\Filter\\Traits\\Mapbox</code>: Mapbox helpers for creating map pins</li> <li><code>\\Filter\\Traits\\Exports</code>: Handles export functionality</li> <li><code>\\Filter\\Traits\\ActivePlugin</code>: Maintains an \"active\" plugin object as a reference</li> <li><code>\\Filter\\Traits\\Reporting</code>: Functions for analytics views</li> <li><code>\\Parser\\Traits\\SlowLog</code>: Logs timings for performance monitoring</li> </ul>"},{"location":"architecture/filter-templates/#template-configuration","title":"Template Configuration","text":""},{"location":"architecture/filter-templates/#core-configuration-methods","title":"Core Configuration Methods","text":"<p>Templates are configured primarily through their <code>init()</code> method:</p> <pre><code>public function init()\n{\n    parent::init();\n    $this-&gt;plugins = array(\\Filter\\Plugin\\WorkOrdersAll::class =&gt; false);\n\n    $this-&gt;setDefaultColumns(array(\n        'id',\n        'title',\n        'location',\n        'schedule',\n        'status',\n    ));\n\n    $this-&gt;setSort('schedule', true);\n    $this-&gt;setView('model');\n}\n</code></pre> <p>Key configuration methods include:</p> <ul> <li><code>setDefaultColumns()</code>: Sets default visible columns</li> <li><code>setSort()</code>: Sets default sorting column and direction</li> <li><code>setView()</code>: Sets the view mode</li> <li><code>setResultsPerPage()</code>: Sets default pagination size</li> <li><code>setNoSeed()</code>: Controls if the first plugin generates an initial pool</li> <li><code>setJsonExport()</code>: Controls if response is formatted as JSON</li> <li><code>setHelpTitle()</code>, <code>setHelpCategory()</code>, <code>setHelpDescription()</code>: Sets help documentation</li> </ul>"},{"location":"architecture/filter-templates/#view-types","title":"View Types","text":"<p>Templates support multiple view types:</p> <ul> <li>list: Traditional tabular data view</li> <li>model: Structured data object view</li> <li>map: Geographic map view with pins</li> <li>schedule: Calendar/schedule view</li> <li>Custom views for specialized needs</li> </ul>"},{"location":"architecture/filter-templates/#template-processing-flow","title":"Template Processing Flow","text":"<p>When a template is used to filter data:</p> <ol> <li>Instantiation: Template is created with dependencies injected</li> <li>Initialization: The <code>init()</code> method configures the template and registers plugins</li> <li>Parameter Processing: The <code>post()</code> method processes request parameters</li> <li>Component Activation: Filterable components are activated based on parameters</li> <li>Plugin Processing: Each active plugin applies its filters to the data pool</li> <li>Result Collection: The <code>getResults()</code> method gathers the filtered results</li> <li>Response Formatting: Results are formatted for the selected view type</li> </ol>"},{"location":"architecture/filter-templates/#plugin-integration","title":"Plugin Integration","text":"<p>Templates use plugins to perform actual filtering operations:</p> <pre><code>protected $plugins = array(\n    \\Filter\\Plugin\\WorkOrdersDraft::class =&gt; false,\n);\n</code></pre> <p>The plugin registration pattern stores class names with a <code>false</code> value initially. During processing, the template will:</p> <ol> <li>Instantiate plugin objects through the service locator</li> <li>Connect each plugin to the template with <code>setTemplate()</code></li> <li>Call plugin's <code>init()</code> method to set up components</li> <li>Invoke plugin's <code>filter()</code> method when filtering is needed</li> <li>Call plugin's <code>gather()</code> method to retrieve result data</li> </ol>"},{"location":"architecture/filter-templates/#template-inheritance","title":"Template Inheritance","text":"<p>Templates can inherit from specialized base classes to reuse functionality:</p> <ul> <li><code>AbstractWorkorderTemplate</code>: Base for work order related templates</li> <li><code>AbstractUsers</code>: Base for user-related templates</li> <li><code>AbstractFundingTransactions</code>: Base for financial templates</li> <li><code>AbstractScheduleTemplate</code>: Base for calendar/schedule templates</li> </ul>"},{"location":"architecture/important-abstract-classes/","title":"Important Abstract Classes","text":"<p>The Filter Framework (FF) is built around a core set of abstract classes that provide the foundation for all filtering, sorting, and displaying operations. This document outlines the most important abstract classes in the framework and their relationships.</p>"},{"location":"architecture/important-abstract-classes/#abstracttemplate","title":"AbstractTemplate","text":"<p>Path: <code>/modules/Filter/Template/AbstractTemplate.php</code></p> <p><code>AbstractTemplate</code> is the cornerstone of the Filter Framework, serving as the base class for all templates. Templates define what data is displayed and how filtering is applied to that data.</p>"},{"location":"architecture/important-abstract-classes/#key-traits","title":"Key Traits","text":"<p>This class incorporates several important traits:</p> <ul> <li><code>Traits\\Pagination</code>: Handles paging through large result sets</li> <li><code>Traits\\User</code>: Provides user-related operations</li> <li><code>Filter\\Traits\\Displayable</code>: Manages columns for display</li> <li><code>Filter\\Traits\\Pool</code>: Handles the collection of result IDs</li> <li><code>Filter\\Traits\\Post</code>: Processes POST data for filtering</li> <li><code>Filter\\Traits\\Tabs</code>: Manages saved user filters/tabs</li> <li><code>Filter\\Traits\\Info</code>: Generates description strings for applied plugins</li> <li><code>Filter\\Traits\\Mapbox</code>: Helper methods for map visualizations</li> <li><code>Filter\\Traits\\Exports</code>: Functionality for exporting data</li> <li><code>Filter\\Traits\\ActivePlugin</code>: Maintains reference to the currently active plugin</li> </ul>"},{"location":"architecture/important-abstract-classes/#important-properties","title":"Important Properties","text":"<ul> <li><code>$defaultView</code>: Defines the default view mode for the template (e.g., \"list\", \"model\", \"tiles\")</li> <li><code>$plugins</code>: Array of plugin classes the template uses</li> <li><code>$optionalComponents</code>: Components that can be conditionally enabled</li> <li><code>$mapType</code>: Type identifier for map visualizations</li> </ul>"},{"location":"architecture/important-abstract-classes/#key-methods","title":"Key Methods","text":"<ul> <li><code>init()</code>: Called upon template instantiation to set up plugins and default configurations</li> <li><code>post($params)</code>: Processes incoming request parameters</li> <li><code>setDefaultColumns($columns)</code>: Sets the default columns to display</li> <li><code>json()</code>: Generates the JSON representation of filtered data</li> </ul>"},{"location":"architecture/important-abstract-classes/#abstractplugin","title":"AbstractPlugin","text":"<p>Path: <code>/modules/Filter/Plugin/AbstractPlugin.php</code></p> <p><code>AbstractPlugin</code> serves as the foundation for all plugins in the framework. Plugins handle the business logic of filtering, determining what data is included and how it's processed.</p>"},{"location":"architecture/important-abstract-classes/#key-traits_1","title":"Key Traits","text":"<ul> <li><code>ServiceLocator</code>: Provides access to application services</li> </ul>"},{"location":"architecture/important-abstract-classes/#important-properties_1","title":"Important Properties","text":"<ul> <li><code>$template</code>: Reference to the associated template</li> <li><code>$join</code>: Array of SQL JOIN clauses</li> <li><code>$select</code>: Array of SQL SELECT clauses</li> <li><code>$where</code>: Array of SQL WHERE clauses</li> <li><code>$having</code>: Array of SQL HAVING clauses</li> <li><code>$order</code>: Array of SQL ORDER BY clauses</li> <li><code>$params</code>: Array of parameterized query values</li> </ul>"},{"location":"architecture/important-abstract-classes/#key-methods_1","title":"Key Methods","text":"<ul> <li><code>init()</code>: Sets up components and initial state</li> <li><code>filter()</code>: Applies filtering logic to determine what records to include</li> <li><code>gather()</code>: Retrieves the filtered data</li> <li><code>addJoin($join)</code>: Adds a JOIN clause</li> <li><code>addWhere($where)</code>: Adds a WHERE clause</li> <li><code>addSelect($select)</code>: Adds a SELECT clause</li> </ul>"},{"location":"architecture/important-abstract-classes/#abstractcustomfields","title":"AbstractCustomFields","text":"<p>Path: <code>/modules/Filter/Plugin/CustomFields/AbstractCustomFields.php</code></p> <p>This specialized abstract plugin class handles custom fields filtering and display. It extends AbstractPlugin with functionality specific to working with custom fields.</p>"},{"location":"architecture/important-abstract-classes/#important-properties_2","title":"Important Properties","text":"<ul> <li><code>$optionalComponents</code>: Array of components that can be conditionally enabled</li> <li><code>$models</code>: Array of model property classes that define what data is fetched</li> <li><code>$timings</code>: Performance tracking for model operations</li> </ul>"},{"location":"architecture/important-abstract-classes/#key-methods_2","title":"Key Methods","text":"<ul> <li><code>init()</code>: Sets up models and components</li> <li><code>setupModel()</code>: Prepares JSON structure</li> <li><code>setupFilters()</code>: Configures filter components</li> <li><code>addListColumns()</code>: Sets up column display for list views</li> <li><code>gather()</code>: Builds and executes query to fetch data</li> </ul>"},{"location":"architecture/important-abstract-classes/#abstractcomponent","title":"AbstractComponent","text":"<p>Path: <code>/modules/Filter/Component/AbstractComponent.php</code></p> <p>This class is the base for all components in the filter system. Components are the building blocks that handle displaying, filtering, and sorting operations.</p>"},{"location":"architecture/important-abstract-classes/#important-properties_3","title":"Important Properties","text":"<ul> <li><code>$aliases</code>: Names by which the component can be referenced</li> <li><code>$binds</code>: Data bindings for the component</li> <li><code>$callables</code>: Map of operation types to callable functions</li> <li><code>$alwaysActive</code>: Whether the component is always enabled</li> </ul>"},{"location":"architecture/important-abstract-classes/#common-derived-classes","title":"Common Derived Classes","text":"<ul> <li><code>Displayable</code>: Components for displaying data</li> <li><code>Filterable</code>: Components for filtering data</li> <li><code>Sortable</code>: Components for sorting data</li> </ul>"},{"location":"architecture/important-abstract-classes/#abstractmodelproperty","title":"AbstractModelProperty","text":"<p>Path: <code>/modules/Filter/Plugin/AbstractModelProperty.php</code></p> <p>Model property classes handle aspects of the data model, such as which fields to include and how they're represented.</p>"},{"location":"architecture/important-abstract-classes/#important-properties_4","title":"Important Properties","text":"<ul> <li><code>$plugin</code>: Reference to the parent plugin</li> <li><code>$template</code>: Reference to the template</li> </ul>"},{"location":"architecture/important-abstract-classes/#key-methods_3","title":"Key Methods","text":"<ul> <li><code>modelComponents()</code>: Defines components related to the model</li> <li><code>filterableComponents()</code>: Defines filtering options for the model</li> <li><code>listComponents()</code>: Sets up components for list views</li> <li><code>jsonRaw($field)</code>: Creates a raw JSON formatter for a field</li> <li><code>jsonBool($field)</code>: Creates a boolean JSON formatter for a field</li> <li><code>jsonInt($field)</code>: Creates an integer JSON formatter for a field</li> </ul>"},{"location":"architecture/important-abstract-classes/#specialized-abstract-classes","title":"Specialized Abstract Classes","text":""},{"location":"architecture/important-abstract-classes/#abstractworkorders","title":"AbstractWorkOrders","text":"<p>Path: <code>/modules/Filter/Plugin/AbstractWorkOrders.php</code></p> <p>Base class for plugins that handle work order filtering.</p>"},{"location":"architecture/important-abstract-classes/#abstracttemplates","title":"AbstractTemplates","text":"<p>Path: <code>/modules/Filter/Plugin/AbstractTemplates.php</code></p> <p>Base class for plugins that handle template filtering.</p>"},{"location":"architecture/important-abstract-classes/#abstractusers","title":"AbstractUsers","text":"<p>Path: <code>/modules/Filter/Template/AbstractUsers.php</code></p> <p>Base template for user-related filtering operations.</p>"},{"location":"architecture/important-abstract-classes/#inheritance-relationships","title":"Inheritance Relationships","text":"<p>The Filter Framework uses multilevel inheritance to provide increasingly specialized functionality:</p> <ol> <li>Base Level:</li> <li>AbstractTemplate</li> <li>AbstractPlugin</li> <li>AbstractComponent</li> <li> <p>AbstractModelProperty</p> </li> <li> <p>Specialized Level:</p> </li> <li>AbstractCustomFields extends AbstractPlugin</li> <li>AbstractWorkOrders extends AbstractPlugin</li> <li>AbstractTemplates extends AbstractPlugin</li> <li> <p>AbstractUsers extends AbstractTemplate</p> </li> <li> <p>Implementation Level:</p> </li> <li>Custom filters (e.g., WorkorderCustomField) extend specialized abstract classes</li> <li>Concrete templates (e.g., CustomFields\\All) extend AbstractTemplate</li> </ol>"},{"location":"architecture/important-abstract-classes/#conclusion","title":"Conclusion","text":"<p>These abstract classes form the core architecture of the Filter Framework, providing a flexible and extensible system for filtering, sorting, and displaying data. Understanding these classes and their relationships is essential for working effectively with the Filter Framework.</p>"},{"location":"architecture/request-lifecycle/","title":"Filter Framework Request Lifecycle","text":"<p>The Filter Framework is a core component of the FieldNation system that manages data filtering, presentation, and interaction. This document outlines the complete request lifecycle within the Filter Framework, from initial HTTP request to response delivery.</p>"},{"location":"architecture/request-lifecycle/#overview","title":"Overview","text":"<p>The Filter Framework follows a hierarchical architecture based on Templates and Plugins. This structure provides a flexible way to define data views and manipulate data through a series of lifecycle hooks. The framework handles everything from routing requests to rendering responses in various formats (JSON, HTML, etc.).</p>"},{"location":"architecture/request-lifecycle/#visual-request-flow","title":"Visual Request Flow","text":"<pre><code>flowchart TD\n    A[HTTP Request] --&gt; B[Router]\n    B --&gt; C[Controller]\n    C --&gt; D[Template Initialization]\n    D --&gt; E[Plugin Registration]\n    E --&gt; F[Request Processing]\n    F --&gt; G[Model Components Setup]\n    G --&gt; H[Filter Application]\n    H --&gt; I[Data Gathering]\n    I --&gt; J[Post-Processing]\n    J --&gt; K[Response Generation]\n    K --&gt; L[HTTP Response]\n\n    subgraph Template\n        D\n        E\n        F\n        G\n    end\n\n    subgraph Plugin\n        H\n        I\n        J\n    end\n\n    subgraph Component\n        M[Displayable]\n        N[Filterable]\n        O[Sortable]\n    end\n\n    G --&gt; M\n    G --&gt; N\n    G --&gt; O</code></pre>"},{"location":"architecture/request-lifecycle/#request-lifecycle-stages","title":"Request Lifecycle Stages","text":""},{"location":"architecture/request-lifecycle/#1-request-initiation","title":"1. Request Initiation","text":"<p>When a request comes in through the FieldNation system:</p> <ol> <li>The request is routed through <code>FieldNation\\Framework\\Router</code></li> <li>If the route is associated with a Filter Framework endpoint, the corresponding controller is instantiated</li> <li>The controller's action method is called with the route parameters</li> </ol> <pre><code>HTTP Request \u2192 Router \u2192 Controller \u2192 Action Method\n</code></pre> <p>Router Registration</p> <p>During router loading/registration, it matches prefix of url and search this in module folder, if there there is not any matched folder, router will throw error though it exist.</p>"},{"location":"architecture/request-lifecycle/#2-template-initialization","title":"2. Template Initialization","text":"<p>Each Filter Template represents a specific data view in the system:</p> <ol> <li>The controller creates or retrieves a template instance (<code>Filter\\Template\\AbstractTemplate</code>)</li> <li>The template's <code>init()</code> method is called, which:</li> <li>Sets up default columns</li> <li>Configures view parameters</li> <li>Registers plugins</li> <li>Sets up pagination</li> </ol> <p>Templates are typically defined in the <code>Filter\\Template\\*</code> namespace and extend <code>AbstractTemplate</code>.</p>"},{"location":"architecture/request-lifecycle/#3-plugin-registration","title":"3. Plugin Registration","text":"<p>Each template works with one or more plugins that define the actual data querying and transformation logic:</p> <ol> <li>The template's <code>getPlugins()</code> method is called to initialize all registered plugins</li> <li>Each plugin is instantiated if not already created</li> <li>The plugin is bound to the template using <code>setTemplate()</code></li> <li>If the user is a staff member, <code>setStaff()</code> is called on the plugin</li> <li>Each plugin's <code>init()</code> method is called</li> </ol> <p>Plugins are defined in the <code>Filter\\Plugin\\*</code> namespace and extend <code>AbstractPlugin</code>.</p>"},{"location":"architecture/request-lifecycle/#4-request-processing","title":"4. Request Processing","text":"<p>After initialization, the template processes the request:</p> <ol> <li>The controller typically calls <code>post()</code> on the template to process POST data</li> <li>Inside <code>post()</code>, the template:</li> <li>Processes pagination parameters</li> <li>Processes sorting parameters</li> <li>Loads active filters</li> <li>Processes filter components</li> </ol>"},{"location":"architecture/request-lifecycle/#5-model-components-setup","title":"5. Model Components Setup","text":"<p>The Filter Framework uses a Model-Component pattern to structure data:</p> <ol> <li>Plugins call their <code>setupModel()</code> method to establish the JSON structure</li> <li>Components are registered using the <code>add()</code> method</li> <li>Each component defines:</li> <li>How it appears in the JSON output</li> <li>How it can be filtered</li> <li>How it can be sorted</li> </ol> <p>Components can be <code>Displayable</code>, <code>Filterable</code>, or <code>Sortable</code>.</p>"},{"location":"architecture/request-lifecycle/#6-filter-application","title":"6. Filter Application","text":"<p>Once the components are set up, filters are applied:</p> <ol> <li>The template's <code>post()</code> method calls <code>filter()</code> on active plugins</li> <li>Each active plugin:</li> <li>Builds query conditions based on filter parameters</li> <li>Executes <code>filter()</code> to populate the result pool</li> <li>Executes <code>postFilter()</code> for any additional processing</li> <li>Results are collected into a \"pool\" of IDs</li> </ol> <p>If <code>noSeed</code> is set to true, the first plugin isn't required to generate results.</p>"},{"location":"architecture/request-lifecycle/#7-data-gathering","title":"7. Data Gathering","text":"<p>After filtering, the actual data is gathered:</p> <ol> <li>The template's <code>json()</code> method is called</li> <li>The <code>gather()</code> method is executed on active plugins</li> <li>Plugins execute SQL queries with all necessary joins</li> <li>Results are structured according to the model components</li> </ol>"},{"location":"architecture/request-lifecycle/#8-post-processing","title":"8. Post-Processing","text":"<p>Data is then post-processed:</p> <ol> <li>For each result, <code>postProcess()</code> is called on each model property</li> <li>This allows transformation or enrichment of data</li> <li>Additional properties may be computed or formatted</li> </ol>"},{"location":"architecture/request-lifecycle/#9-response-generation","title":"9. Response Generation","text":"<p>Finally, the response is generated:</p> <ol> <li>For JSON responses, the data is formatted according to the model components</li> <li>For HTML responses, the Twig template engine renders views</li> <li>Pagination metadata is included in the response</li> <li>If an export was requested, data is prepared for export</li> </ol>"},{"location":"architecture/request-lifecycle/#component-types","title":"Component Types","text":"<p>The Filter Framework uses three main component types:</p> <ol> <li>Displayable: Defines how data is displayed in the UI</li> <li>Filterable: Defines how data can be filtered by users</li> <li>Sortable: Defines how data can be sorted</li> </ol> <p>Each component can have: - Group and order for UI organization - Aliases for easier access - Bindings to model properties - Callable functions for value transformation</p>"},{"location":"architecture/request-lifecycle/#common-flows","title":"Common Flows","text":""},{"location":"architecture/request-lifecycle/#api-request-flow","title":"API Request Flow","text":"<pre><code>HTTP Request \u2192 RestController \u2192 Template \u2192 Plugins \u2192 JSON Response\n</code></pre>"},{"location":"architecture/request-lifecycle/#ui-filter-flow","title":"UI Filter Flow","text":"<pre><code>HTTP Request \u2192 Controller \u2192 Template (with HTML view) \u2192 Plugins \u2192 Twig Rendering \u2192 HTML Response\n</code></pre>"},{"location":"architecture/request-lifecycle/#data-export-flow","title":"Data Export Flow","text":"<pre><code>Filter Request \u2192 Template \u2192 Plugins \u2192 Export Processing \u2192 Download Response\n</code></pre>"},{"location":"architecture/request-lifecycle/#performance-considerations","title":"Performance Considerations","text":"<p>The Filter Framework includes performance tracking features:</p> <ol> <li>Timing data is collected during each stage</li> <li>In debug mode, execution times for each model are recorded</li> <li>Slow queries can be logged using the <code>SlowLog</code> trait</li> </ol>"},{"location":"architecture/request-lifecycle/#error-handling","title":"Error Handling","text":"<p>Error handling in the Filter Framework:</p> <ol> <li>Exceptions in controllers are caught by the Router</li> <li>For REST controllers, errors are formatted as JSON responses with HTTP status codes</li> <li>For standard controllers, errors may trigger a 404 or error page</li> </ol>"},{"location":"architecture/request-lifecycle/#customization-points","title":"Customization Points","text":"<p>To extend the Filter Framework:</p> <ol> <li>Create a new Template class in <code>Filter\\Template</code> namespace</li> <li>Create corresponding Plugin class(es) in <code>Filter\\Plugin</code> namespace</li> <li>Define Model Properties for structured data representation</li> <li>Register your template with the appropriate routes</li> </ol>"},{"location":"architecture/request-lifecycle/#security","title":"Security","text":"<p>The Filter Framework integrates with FieldNation's security system:</p> <ol> <li>ACL checks are performed in controllers</li> <li>OAuth token validation is performed for API requests</li> <li>CSRF protection is provided for form submissions</li> <li>Session management is handled by the framework</li> </ol> <p>By understanding this request lifecycle, developers can effectively work with and extend the Filter Framework to create new data views and interactions.</p>"},{"location":"basics/asset-management/","title":"Asset Management in the Filter Framework","text":""},{"location":"basics/authentication/","title":"Authentication","text":""},{"location":"basics/authorization/","title":"Authorization","text":""},{"location":"basics/caching/","title":"Caching Strategies in the Filter Framework","text":""},{"location":"basics/configuration/","title":"System Configuration","text":"<p>The Field Nation system uses a comprehensive configuration file (<code>web/includes/system_config.php</code>) that defines various settings for the application. This file serves as a central repository for configuration parameters that control different aspects of the system.</p>"},{"location":"basics/configuration/#configuration-structure","title":"Configuration Structure","text":"<p>The configuration is stored in an associative array called <code>$fn_config</code>, which is later converted into PHP constants that can be accessed throughout the application.</p>"},{"location":"basics/configuration/#key-configuration-categories","title":"Key Configuration Categories","text":""},{"location":"basics/configuration/#system-status","title":"System Status","text":"<pre><code>$fn_config['SYSCONF_READ_ONLY_MODE'] = false;\n$fn_config['SYSCONF_EMERGENCY_MODE'] = false;\n$fn_config['SYSCONF_SYSTEM_MESSAGE'] = '';\n</code></pre>"},{"location":"basics/configuration/#environment-settings","title":"Environment Settings","text":"<pre><code>$fn_config['SYSCONF_ENV'] = \"dev\"; // environment: dev, stable, live\n$fn_config['SYSCONF_UI_DOMAIN'] = \"localhost:8000\";\n$fn_config['SYSCONF_MONO_DOMAIN'] = \"localhost:8080\";\n</code></pre>"},{"location":"basics/configuration/#database-configuration","title":"Database Configuration","text":"<pre><code>$fn_config[\"SYSCONF_DBHOST\"] = \"127.0.0.1\";\n$fn_config[\"SYSCONF_DBNAME\"] = \"fieldnation\";\n$fn_config[\"SYSCONF_DBUSER\"] = \"\";\n$fn_config[\"SYSCONF_DBPASS\"] = \"\";\n\n// Read-only database\n$fn_config[\"SYSCONF_DB_READONLY_HOST\"] = \"127.0.0.1\";\n$fn_config[\"SYSCONF_DB_READONLY_NAME\"] = \"fieldnation\";\n$fn_config[\"SYSCONF_DB_READONLY_USER\"] = \"\";\n$fn_config[\"SYSCONF_DB_READONLY_PASS\"] = \"\";\n</code></pre>"},{"location":"basics/configuration/#environment-variables-and-env-files","title":"Environment Variables and .env Files","text":"<p>The system supports environment variable overrides through <code>.env</code> files, allowing for easier local development and secure configuration management:</p> <pre><code>// Load environment variables from .env file if present\n$htmlRoot = dirname(__DIR__, 2);\nif(file_exists($htmlRoot . '/.env')) {\n    $dotenv = Dotenv\\Dotenv::createMutable($htmlRoot);\n    $dotenv-&gt;load();\n}\n\n// Environment variables take precedence over configuration values\nforeach ($fn_config as $key =&gt; $value) {\n    if (!in_array($key, $skipEnvs) &amp;&amp; $envValue = $loadEnv($key)) {\n        defined($key) or define($key, $envValue);\n        continue;\n    }\n\n    defined($key) or define($key, $value);\n}\n</code></pre> <p>This mechanism allows developers to:</p> <ol> <li>Create a <code>.env</code> file in the project root to define environment-specific variables</li> <li>Override any configuration value without modifying the main configuration file</li> <li>Keep sensitive values like API keys and database credentials out of version control</li> </ol>"},{"location":"basics/configuration/#example-env-file","title":"Example .env File","text":"<pre><code># Database configuration\nSYSCONF_DBHOST=localhost\nSYSCONF_DBNAME=fieldnation_local\nSYSCONF_DBUSER=dev_user\nSYSCONF_DBPASS=secure_password\n\n# API keys\nAWS_KEY=your_aws_key\nAWS_SECRET_KEY=your_aws_secret\n\n# Feature flags\nSYSCONF_DEBUG=true\n</code></pre>"},{"location":"basics/configuration/#feature-flags","title":"Feature Flags","text":"<p>The system includes flags to enable or disable specific features:</p> <pre><code>$fn_config[\"NCNS_ENABLED\"] = true;\n$fn_config['PUBLIC_PROFILE_ENABLED'] = true;\n$fn_config['BUSINESS_ENTITY_VERIFICATION_ENABLED'] = true;\n$fn_config['SCHEDULE_CONFLICT_RESOLUTION_RELEASED'] = true;\n</code></pre>"},{"location":"basics/configuration/#microservices-configuration","title":"Microservices Configuration","text":"<p>The system integrates with various microservices:</p> <pre><code>$fn_config[\"PUBLISH_API_URL\"] = 'http://work-order-publish:8089';\n$fn_config[\"QUALIFICATIONS_API_URL\"] = 'http://qualifications:8086';\n$fn_config[\"ACTIVITY_METRICS_API_URL\"] = 'http://activity-metrics:8234';\n$fn_config[\"USER_PROFILE_API_URL\"] = 'http://user-profile:8091';\n</code></pre>"},{"location":"basics/configuration/#configuration-override-mechanism","title":"Configuration Override Mechanism","text":"<p>The system supports multiple levels of configuration overrides, in order of precedence:</p> <ul> <li>Environment variables (highest priority)</li> <li><code>.env</code> file in the project root</li> <li>Local override files:</li> <li><code>system_config.local.override.php</code></li> <li><code>system_config.local.php</code></li> <li>Base configuration in <code>system_config.php</code> (lowest priority)</li> </ul>"},{"location":"basics/configuration/#using-configuration-values","title":"Using Configuration Values","text":"<p>Once the configuration file is included, all values are accessible as PHP constants:</p> <pre><code>// Access a configuration value\n$domainName = SYSCONF_UI_DOMAIN;\n$dbHost = SYSCONF_DBHOST;\n</code></pre>"},{"location":"basics/configuration/#important-note","title":"Important Note","text":"<p>Sensitive values like API keys and passwords should be set via environment variables or secure configuration files, not hardcoded in the main configuration file.</p>"},{"location":"basics/console-commands/","title":"Console Commands","text":"<p>This document provides an overview of the console commands available in the Filter Framework. Console commands are essential for performing various tasks from the command line, such as managing the application, running migrations, and executing tests.</p>"},{"location":"basics/console-commands/#overview","title":"Overview","text":"<p>The Filter Framework includes a set of console commands that help developers interact with the framework efficiently. These commands can be executed from the terminal and are designed to streamline common development tasks.</p>"},{"location":"basics/console-commands/#common-commands","title":"Common Commands","text":""},{"location":"basics/console-commands/#1-makecommand","title":"1. <code>make:command</code>","text":"<p>Creates a new console command class in the application.</p> <p>Usage: <pre><code>php artisan make:command CommandName\n</code></pre></p>"},{"location":"basics/console-commands/#2-migrate","title":"2. <code>migrate</code>","text":"<p>Runs the database migrations.</p> <p>Usage: <pre><code>php artisan migrate\n</code></pre></p>"},{"location":"basics/console-commands/#3-migraterollback","title":"3. <code>migrate:rollback</code>","text":"<p>Rolls back the last database migration.</p> <p>Usage: <pre><code>php artisan migrate:rollback\n</code></pre></p>"},{"location":"basics/console-commands/#4-dbseed","title":"4. <code>db:seed</code>","text":"<p>Seeds the database with records.</p> <p>Usage: <pre><code>php artisan db:seed\n</code></pre></p>"},{"location":"basics/console-commands/#5-test","title":"5. <code>test</code>","text":"<p>Runs the application tests.</p> <p>Usage: <pre><code>php artisan test\n</code></pre></p>"},{"location":"basics/console-commands/#creating-custom-commands","title":"Creating Custom Commands","text":"<p>Developers can create custom console commands tailored to their application's needs. To create a custom command, use the <code>make:command</code> command and implement the desired functionality in the generated class.</p>"},{"location":"basics/console-commands/#conclusion","title":"Conclusion","text":"<p>Console commands are a powerful feature of the Filter Framework, enabling developers to perform tasks efficiently from the command line. Familiarizing yourself with these commands will enhance your productivity and streamline your development workflow.</p>"},{"location":"basics/context/","title":"File: /filter-framework-docs/filter-framework-docs/docs/basics/context.md","text":""},{"location":"basics/context/#context-management-in-the-filter-framework","title":"Context Management in the Filter Framework","text":"<p>The context in the Filter Framework is a crucial component that allows for the management of state and data throughout the lifecycle of a request. It serves as a container for various pieces of information that can be accessed and modified by different parts of the application.</p>"},{"location":"basics/context/#overview","title":"Overview","text":"<p>The context is designed to hold data that is relevant to the current request, such as user information, configuration settings, and other contextual data that may be needed by filters, services, or controllers.</p>"},{"location":"basics/context/#key-features","title":"Key Features","text":"<ul> <li>State Management: The context allows for the storage and retrieval of stateful information during the request lifecycle.</li> <li>Data Sharing: Components within the framework can share data through the context, promoting loose coupling and modular design.</li> <li>Lifecycle Awareness: The context is aware of the request lifecycle, ensuring that data is appropriately managed and cleaned up after the request is completed.</li> </ul>"},{"location":"basics/context/#usage","title":"Usage","text":"<p>To utilize the context in your application, you can access it through the provided context management utilities. Here\u2019s a basic example:</p> <pre><code># Example of accessing the context\nfrom framework.context import Context\n\n# Get the current context\ncurrent_context = Context.get_current()\n\n# Set a value in the context\ncurrent_context.set('user_id', 123)\n\n# Retrieve a value from the context\nuser_id = current_context.get('user_id')\n</code></pre>"},{"location":"basics/context/#best-practices","title":"Best Practices","text":"<ul> <li>Always clean up any data stored in the context after it is no longer needed to prevent memory leaks.</li> <li>Use descriptive keys when storing data in the context to avoid collisions and improve code readability.</li> <li>Consider using context-aware services that can automatically manage their state based on the current context.</li> </ul>"},{"location":"basics/context/#conclusion","title":"Conclusion","text":"<p>The context management system in the Filter Framework is a powerful tool that enhances the flexibility and maintainability of your application. By effectively utilizing the context, you can create more modular and reusable components that work seamlessly together.</p>"},{"location":"basics/controllers/","title":"Controllers in the Field Nation Framework","text":"<p>Controllers are a central part of the Field Nation framework, serving as the connection point between routes and business logic. This document explains how controllers work in the system, their hierarchy, and best practices for implementing them.</p>"},{"location":"basics/controllers/#controller-types","title":"Controller Types","text":"<p>The framework has several types of controllers, each serving a specific purpose:</p>"},{"location":"basics/controllers/#1-base-controller","title":"1. Base Controller","text":"<p><code>FieldNation\\Framework\\Controller</code> is the abstract base class that all controllers extend. It provides:</p> <ul> <li>Access to the application context</li> <li>Template rendering capabilities</li> <li>Authentication and authorization methods</li> <li>Error handling</li> <li>Service locator integration</li> </ul> <pre><code>namespace YourModule\\Controller;\n\nuse FieldNation\\Framework\\Controller;\n\nclass IndexController extends Controller \n{\n    public function init() \n    {\n        // Initialization code\n        $this-&gt;isRequired('SOME_PERMISSION'); // ACL check\n    }\n\n    public function index()\n    {\n        // Action method\n        $params = $this-&gt;getContext()-&gt;getRouteParameters();\n\n        return $this-&gt;render('your-template.html.twig', [\n            'data' =&gt; 'value'\n        ]);\n    }\n}\n</code></pre>"},{"location":"basics/controllers/#2-rest-controllers","title":"2. REST Controllers","text":"<p>For API development, two specialized REST controller classes are available:</p>"},{"location":"basics/controllers/#restcontroller","title":"RestController","text":"<p><code>FieldNation\\Framework\\RestController</code> handles API endpoints with JSON responses and provides:</p> <ul> <li>OAuth authentication handling</li> <li>JSON response formatting</li> <li>Pagination support</li> <li>Error standardization</li> <li>ACL integration</li> </ul> <pre><code>namespace YourModule\\Api\\v1;\n\nuse FieldNation\\Framework\\RestController;\n\nclass ExampleController extends RestController\n{\n    public function show()\n    {\n        $this-&gt;isGranted(); // Authentication check\n        $params = $this-&gt;getContext()-&gt;getRouteParameters();\n        $id = $params['id'];\n\n        $data = $this-&gt;get('yourService')-&gt;findById($id);\n\n        return $this-&gt;success($data, 'Data retrieved successfully');\n    }\n}\n</code></pre>"},{"location":"basics/controllers/#restcontrollerv2","title":"RestControllerV2","text":"<p><code>FieldNation\\Framework\\RestControllerV2</code> extends RestController with enhanced features for V2 APIs:</p> <ul> <li>Default envelope responses</li> <li>Advanced pagination</li> <li>Standardized error reference IDs</li> <li>Scoped authorization</li> </ul>"},{"location":"basics/controllers/#3-filter-framework-controllers","title":"3. Filter Framework Controllers","text":"<p>Controllers specifically for the Filter framework provide standardized list views and filtering capabilities:</p> <pre><code>namespace YourModule\\Api\\v2;\n\nuse FieldNation\\Framework\\RestController;\n\nclass Listing extends RestController\n{\n    protected function getLists()\n    {\n        return array(\n            array(\n                'id'      =&gt; 'active_items',\n                'label'   =&gt; 'Active',\n                'default' =&gt; true,\n                'class'   =&gt; \\Filter\\Template\\YourModule\\ActiveItems::class,\n            ),\n            // Additional lists...\n        );\n    }\n\n    protected function loadService()\n    {\n        $this-&gt;isGranted();\n\n        return $this-&gt;get(\\Filter\\Service\\v2\\Listing::class)\n            -&gt;setTemplate($this-&gt;get(\\Filter\\Template\\YourModule\\ActiveItems::class))\n            -&gt;convertFilterInput('name', array($service, 'prefixBoolean'));\n    }\n}\n</code></pre>"},{"location":"basics/controllers/#4-rest-put-controllers","title":"4. REST PUT Controllers","text":"<p><code>FieldNation\\Rest\\Put\\Route</code> controllers handle bulk operations and long-running processes:</p> <ul> <li>Session-based item tracking</li> <li>Progress reporting</li> <li>Background processing capabilities</li> <li>Error aggregation</li> </ul>"},{"location":"basics/controllers/#controller-lifecycle","title":"Controller Lifecycle","text":"<ol> <li>Routing: The router matches a URL to a controller and action</li> <li>Instantiation: The controller is instantiated with the context</li> <li>Initialization: The <code>init()</code> method is called automatically</li> <li>Action Execution: The matched action method is invoked with route parameters</li> <li>Response Generation: The controller renders a template or returns a response</li> <li>Dispatch: For non-REST controllers, the <code>dispatch()</code> method outputs the rendered content</li> </ol>"},{"location":"basics/controllers/#key-concepts","title":"Key Concepts","text":""},{"location":"basics/controllers/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>Controllers include methods for enforcing permissions:</p> <pre><code>// Check if user is authenticated\n$this-&gt;isGranted();\n\n// Check if user has a specific permission\n$this-&gt;isRequired('PERMISSION_NAME');\n\n// Deny access with a custom message\n$this-&gt;denyAccess('Custom message');\n</code></pre>"},{"location":"basics/controllers/#service-locator","title":"Service Locator","text":"<p>Controllers have access to the service locator for dependency management:</p> <pre><code>$service = $this-&gt;get(YourService::class);\n$result = $service-&gt;doSomething();\n</code></pre>"},{"location":"basics/controllers/#request-and-response-handling","title":"Request and Response Handling","text":"<pre><code>// Get route parameters\n$params = $this-&gt;getContext()-&gt;getRouteParameters();\n\n// Get query or POST parameters\n$request = $this-&gt;getContext()-&gt;getRequest();\n$value = $request['parameter_name'];\n\n// Get JSON request body (in REST controllers)\n$json = $this-&gt;getJsonParams();\n\n// Return JSON response (in REST controllers)\nreturn $this-&gt;json($data);\n\n// Return success response (in REST controllers)\nreturn $this-&gt;success($data, 'Success message');\n\n// Return error response (in REST controllers)\nreturn $this-&gt;error('Error message');\n</code></pre>"},{"location":"basics/controllers/#template-rendering","title":"Template Rendering","text":"<pre><code>// Render a template with parameters\nreturn $this-&gt;render('template.html.twig', [\n    'parameter' =&gt; 'value'\n]);\n\n// Render a template with a custom layout\nreturn $this-&gt;render('template.html.twig', [\n    'parameter' =&gt; 'value'\n], 'layout/custom.html.twig');\n</code></pre>"},{"location":"basics/controllers/#redirects","title":"Redirects","text":"<pre><code>// Redirect to another URL\nreturn $this-&gt;redirect('/destination');\n</code></pre>"},{"location":"basics/controllers/#rest-controller-features","title":"REST Controller Features","text":""},{"location":"basics/controllers/#json-response-formatting","title":"JSON Response Formatting","text":"<p>REST controllers provide standardized JSON formatting:</p> <pre><code>// Standard JSON response\n$this-&gt;json(['key' =&gt; 'value']);\n\n// Success response with envelope\n$this-&gt;success($data, 'Operation was successful');\n\n// Error response\n$this-&gt;error('Something went wrong');\n\n// Specific error with HTTP status code\n$this-&gt;jsonError([\n    'status_code' =&gt; 400,\n    'message' =&gt; 'Invalid input'\n]);\n</code></pre>"},{"location":"basics/controllers/#pagination","title":"Pagination","text":"<p>REST controllers support request pagination:</p> <pre><code>$page = (int)$this-&gt;getParam('page', 0);\n$perPage = (int)$this-&gt;getParam('per_page', 25);\n\n$results = $service-&gt;getItems($page, $perPage);\n$totalItems = $service-&gt;countItems();\n\n$this-&gt;createPagination($page, $perPage, $totalItems, $requestedActionName);\n$this-&gt;addPaginationHeaders();\n\nreturn $this-&gt;json($results);\n</code></pre>"},{"location":"basics/controllers/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Keep Controllers Thin: Controllers should only contain request handling, input validation, and view presentation. Business logic should be delegated to services.</p> </li> <li> <p>Use Service Classes: For complex logic or data manipulation, create dedicated service classes and access them through the service locator.</p> </li> <li> <p>Check Permissions Early: Always add permission checks at the beginning of your controller methods.</p> </li> <li> <p>Validate Input: Validate and sanitize all user input before processing.</p> </li> <li> <p>Use Route Parameters: For required values, define them as route parameters rather than query parameters.</p> </li> <li> <p>Standardize Error Handling: Use the built-in error handling mechanisms to provide consistent error responses.</p> </li> <li> <p>Document API Endpoints: Add docblock comments to describe your API endpoints, especially for REST controllers.</p> </li> </ol>"},{"location":"basics/controllers/#working-with-filter-framework","title":"Working with Filter Framework","text":"<p>For list-based interfaces, use the Filter framework's standard patterns:</p> <ol> <li>Create a Template class in the <code>Filter\\Template</code> namespace</li> <li>Implement a Listing controller that returns the template configurations</li> <li>Use <code>RouteBuilder</code> to create standardized endpoints:</li> </ol> <pre><code>// In your_module/v2_api.php\nuse FieldNation\\Framework\\Route;\nrequire_once(__DIR__ . '/../Filter/Service/v2/RouteBuilder.php');\n\nreturn array_merge(\n    \\Filter\\Service\\v2\\RouteBuilder::build('items', \\YourModule\\Api\\v2\\Listing::class),\n    // Additional routes...\n);\n</code></pre>"},{"location":"basics/controllers/#controller-routing","title":"Controller Routing","text":"<p>Controllers are mapped to routes in various route definition files:</p> <pre><code>// In your_module/routes.php or your_module/v1_api.php\nuse FieldNation\\Framework\\Route;\n\nreturn array(\n    new Route(\n        'your-module/action/:parameter',\n        array(\\YourModule\\Controller\\YourController::class, 'actionMethod')\n    ),\n    // More routes...\n);\n</code></pre> <p>For REST API controllers, version-specific route files are used: - <code>v1_api.php</code> for V1 API routes - <code>v2_api.php</code> for V2 API routes</p>"},{"location":"basics/controllers/#debugging-controllers","title":"Debugging Controllers","text":"<ol> <li>Use <code>$this-&gt;get('logger')-&gt;info('message', $context)</code> for logging</li> <li>For REST controllers, add debug information in development environments with:    <pre><code>if (SYSCONF_DEBUG) {\n    $response['debug'] = $debugInfo;\n}\n</code></pre></li> </ol>"},{"location":"basics/controllers/#conclusion","title":"Conclusion","text":"<p>Controllers are the entry point for HTTP requests in the Field Nation framework. By following the patterns established in the framework, you can create consistent, maintainable, and secure applications that integrate well with the rest of the system.</p>"},{"location":"basics/debugging/","title":"Debugging","text":""},{"location":"basics/error-handling/","title":"Error Handling in the Filter Framework","text":""},{"location":"basics/logging/","title":"Logging Practices in the Filter Framework","text":""},{"location":"basics/queues-jobs/","title":"File: /filter-framework-docs/filter-framework-docs/docs/basics/queues-jobs.md","text":""},{"location":"basics/queues-jobs/#queues-and-jobs-in-the-filter-framework","title":"Queues and Jobs in the Filter Framework","text":""},{"location":"basics/queues-jobs/#overview","title":"Overview","text":"<p>Queues and jobs are essential components in the Filter Framework that allow for asynchronous processing of tasks. This enables the application to handle long-running processes without blocking the main execution flow.</p>"},{"location":"basics/queues-jobs/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Queue: A queue is a data structure that holds jobs waiting to be processed. Jobs can be added to the queue and processed in the order they were received (FIFO - First In, First Out).</p> </li> <li> <p>Job: A job represents a specific task that needs to be executed. Jobs can be queued for execution at a later time, allowing for better resource management and improved application performance.</p> </li> </ul>"},{"location":"basics/queues-jobs/#implementing-queues-and-jobs","title":"Implementing Queues and Jobs","text":"<ol> <li> <p>Creating a Job: To create a job, define a class that implements the job logic. This class should include methods for handling the job's execution and any necessary cleanup.</p> </li> <li> <p>Adding Jobs to the Queue: Use the queue manager to add jobs to the queue. This can typically be done through a simple method call, specifying the job class and any parameters it requires.</p> </li> <li> <p>Processing Jobs: The queue worker is responsible for processing jobs from the queue. It will continuously check for new jobs and execute them as they become available.</p> </li> <li> <p>Error Handling: Implement error handling within your job classes to manage any exceptions that may occur during execution. This ensures that failed jobs can be retried or logged appropriately.</p> </li> </ol>"},{"location":"basics/queues-jobs/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Keep Jobs Lightweight: Ensure that jobs are efficient and do not perform heavy computations. Offload intensive tasks to separate processes if necessary.</p> </li> <li> <p>Monitor Queue Performance: Regularly monitor the performance of your queues and jobs to identify bottlenecks and optimize processing times.</p> </li> <li> <p>Use Job Prioritization: If your application requires it, implement job prioritization to ensure that critical tasks are processed before less important ones.</p> </li> </ul>"},{"location":"basics/queues-jobs/#conclusion","title":"Conclusion","text":"<p>Queues and jobs are powerful tools in the Filter Framework that enhance the application's ability to manage tasks efficiently. By leveraging these components, developers can create responsive and scalable applications.</p>"},{"location":"basics/services/","title":"Field Nation Filter Framework Services","text":"<p>The Filter Framework in Field Nation provides a robust service-oriented architecture for building filterable, sortable, and pageable data listings. This document provides an overview of the service components and their usage within the framework.</p>"},{"location":"basics/services/#service-architecture","title":"Service Architecture","text":"<p>The Filter Framework is built on top of Field Nation's core service architecture, which follows a modular approach to handling data operations. Services in the Filter Framework extend the base <code>FieldNation\\Framework\\Service</code> class and leverage the Service Manager pattern.</p>"},{"location":"basics/services/#core-service-classes","title":"Core Service Classes","text":"<ul> <li>AbstractV2Service: The foundation for V2 API services that implements data validation, error handling, and execution.</li> <li>AbstractTemplate: Base template class that provides structure for filter components and plugins.</li> </ul>"},{"location":"basics/services/#service-manager","title":"Service Manager","text":"<p>The Service Manager is a critical part of the framework that handles dependency injection and service localization.</p> <pre><code>// Example of using the Service Manager\n$service = \\FieldNation\\Framework\\ServiceManager\\Manager::getLocator()-&gt;get(MyService::class);\n</code></pre>"},{"location":"basics/services/#service-locator","title":"Service Locator","text":"<p>The <code>ServiceManager\\Locator</code> class provides methods to locate and instantiate services dynamically:</p> <ul> <li>get(): Loads a service by its alias or FQDN</li> <li>set(): Sets a service instance for a specific alias</li> <li>resolveFactory(): Converts a class name into its factory and creates it if it exists</li> </ul>"},{"location":"basics/services/#service-creation-pattern","title":"Service Creation Pattern","text":"<p>Services in the Filter Framework typically follow the Factory pattern for instantiation:</p>"},{"location":"basics/services/#factory-interface","title":"Factory Interface","text":"<p>All service factories implement the <code>FieldNation\\Framework\\ServiceManager\\FactoryInterface</code>:</p> <pre><code>namespace FieldNation\\Framework\\ServiceManager;\n\ninterface FactoryInterface \n{\n    public function create(Locator $app);\n}\n</code></pre>"},{"location":"basics/services/#factory-implementation","title":"Factory Implementation","text":"<pre><code>namespace MyNamespace\\Factory\\Service;\n\nuse FieldNation\\Framework\\ServiceManager;\n\nclass MyService implements ServiceManager\\FactoryInterface\n{\n    public function create(ServiceManager\\Locator $app)\n    {\n        $service = new \\MyNamespace\\Service\\MyService();\n        $service-&gt;setConfig([\n            'apiUrl' =&gt; API_URL,\n            'env' =&gt; SYSCONF_ENV,\n        ]);\n\n        return $service;\n    }\n}\n</code></pre>"},{"location":"basics/services/#filter-services","title":"Filter Services","text":"<p>Filter services provide the business logic for applying filters, sorting, and pagination to data sets. They leverage the <code>AbstractTemplate</code> class to define their structure and behavior.</p>"},{"location":"basics/services/#template-classes","title":"Template Classes","text":"<p>Templates define the structure of a filterable interface:</p> <pre><code>namespace Filter\\Template\\MyFilter;\n\nuse FieldNation\\Framework\\Service\\Traits;\nuse Filter\\Template\\AbstractUsers;\n\nclass MyTemplate extends AbstractUsers\n{\n    public function init()\n    {\n        parent::init();\n        $this-&gt;plugins = [\\Filter\\Plugin\\MyFilter\\MyPlugin::class =&gt; false];\n\n        $this-&gt;setDefaultColumns([\n            'name',\n            'status',\n            'created_date',\n        ]);\n    }\n}\n</code></pre>"},{"location":"basics/services/#plugin-classes","title":"Plugin Classes","text":"<p>Plugins provide the actual filtering logic:</p> <pre><code>namespace Filter\\Plugin\\MyFilter;\n\nuse Filter\\Component;\nuse Filter\\Plugin\\AbstractPlugin;\n\nclass MyPlugin extends AbstractPlugin\n{\n    public function init()\n    {\n        $this-&gt;add((new Component\\Filterable('General', 'Search'))\n            -&gt;setType('text')\n            -&gt;setCallable('post', function ($value) {\n                // Filter implementation\n            })\n        );\n    }\n\n    public function filter()\n    {\n        // Implementation of the filter logic\n    }\n}\n</code></pre>"},{"location":"basics/services/#service-traits","title":"Service Traits","text":"<p>The Filter Framework makes extensive use of traits to add functionality to services:</p> <ul> <li>Traits\\ServiceLocator: Provides access to the service locator</li> <li>Traits\\User: User-related functionality</li> <li>Traits\\Pagination: Pagination functionality</li> <li>Traits\\Pool: Handling result pools</li> <li>Traits\\Events: Event handling functionality</li> </ul>"},{"location":"basics/services/#abstractv2service-features","title":"AbstractV2Service Features","text":"<p>The <code>AbstractV2Service</code> class provides robust features for data validation and processing:</p> <ul> <li>Validation Methods: <code>shouldBeString()</code>, <code>shouldBeNumber()</code>, <code>shouldBeEmail()</code>, etc.</li> <li>Error Handling: <code>error()</code>, <code>warning()</code>, <code>getErrors()</code>, <code>hasErrors()</code>, etc.</li> <li>Extended Properties: Pass context information without including it in the data model</li> <li>Sub-Services: Support for cascading services through <code>shouldBeSubService()</code> and <code>shouldBeArrayOfSubServices()</code></li> </ul>"},{"location":"basics/services/#using-services-in-the-framework","title":"Using Services in the Framework","text":"<p>Services in the Filter Framework are typically used to:</p> <ol> <li>Define filterable components</li> <li>Process user selections</li> <li>Apply filters to data sets</li> <li>Format and return results</li> </ol>"},{"location":"basics/services/#example-basic-service-usage","title":"Example: Basic Service Usage","text":"<pre><code>// Get a service instance\n$filterService = $this-&gt;get(\\Filter\\Template\\GlobalProviders\\All::class);\n\n// Configure and apply filters\n$filterService-&gt;post([\n    'search' =&gt; $searchTerm,\n    'status' =&gt; 'active',\n    'sort' =&gt; 'created_date',\n    'sort_dir' =&gt; 'desc',\n]);\n\n// Get filtered results\n$results = $filterService-&gt;getResults();\n</code></pre>"},{"location":"basics/services/#best-practices","title":"Best Practices","text":"<ol> <li>Service Segregation: Keep services focused on a single responsibility</li> <li>Use Factory Pattern: Always use factories to create services</li> <li>Leverage Traits: Use traits to share functionality between services</li> <li>Validate Input: Use the built-in validation methods for data validation</li> <li>Handle Errors: Always check for errors and provide meaningful messages</li> </ol>"},{"location":"basics/services/#common-service-types","title":"Common Service Types","text":"<ul> <li>Template Services: Define the structure of filterable interfaces</li> <li>Plugin Services: Implement filter logic</li> <li>Component Services: Provide UI components for filters</li> <li>Factory Services: Create and configure service instances</li> <li>Utility Services: Provide helper functionality</li> </ul> <p>By following these patterns and guidelines, you can effectively work with and extend the Filter Framework's service architecture.</p>"},{"location":"basics/session-management/","title":"Session Management in Field Nation Framework","text":""},{"location":"basics/session-management/#overview","title":"Overview","text":"<p>The Field Nation framework implements a custom session management system that diverges from PHP's standard session handling. Instead of using PHP's built-in <code>$_SESSION</code> superglobal with server-side session storage, the framework uses a hybrid approach combining cookies and Redis cache for improved performance, scalability, and security.</p> <p>This document provides a comprehensive overview of how session management works within the Field Nation framework.</p>"},{"location":"basics/session-management/#core-components","title":"Core Components","text":"<p>The session management system consists of several key components:</p>"},{"location":"basics/session-management/#1-fnsession-class","title":"1. FnSession Class","text":"<p>The <code>FnSession</code> class is the primary interface for session management. It implements the <code>\\ArrayAccess</code> interface, allowing it to be used as if it were the standard <code>$_SESSION</code> superglobal array.</p> <p>Key features: - Singleton pattern implementation via <code>getInstance()</code> - Implements <code>\\ArrayAccess</code> interface for array-like access - Manages both cookie-based session data and extended session data - Handles session creation, retrieval, modification, and destruction</p>"},{"location":"basics/session-management/#2-fnsessioncookie-class","title":"2. FnSessionCookie Class","text":"<p>The <code>FnSessionCookie</code> class handles the actual cookie management, including: - Creating and reading cookie data - Securely storing essential user information - Ensuring cookie integrity through hash validation - Managing cookie expiration</p>"},{"location":"basics/session-management/#3-redis-cache-integration","title":"3. Redis Cache Integration","text":"<p>The session system uses Redis for: - Storing extended session data beyond what's kept in cookies - Providing performance optimization for session data retrieval - Supporting session revocation without waiting for cookie expiration</p>"},{"location":"basics/session-management/#session-data-storage","title":"Session Data Storage","text":"<p>The session management system divides session data into two categories:</p>"},{"location":"basics/session-management/#core-session-data-cookie-based","title":"Core Session Data (Cookie-Based)","text":"<p>Stored directly in a cookie named <code>FNSESS</code>: - <code>sess_user_id</code> - Authenticated user ID - <code>sess_company_id</code> - Company ID associated with the user - <code>sess_group_id</code> - User's role/group within the system - <code>sess_staff_company_id</code> - For staff members acting on behalf of a company</p>"},{"location":"basics/session-management/#extended-session-data-cache-based","title":"Extended Session Data (Cache-Based)","text":"<p>Stored in Redis cache, associated with the session ID: - Any additional session variables not in the core set - Company features array (lazy-loaded) - Additional user context information</p>"},{"location":"basics/session-management/#session-lifecycle","title":"Session Lifecycle","text":""},{"location":"basics/session-management/#initialization","title":"Initialization","text":"<p>Session initialization occurs in <code>/web/includes/session_start.php</code>, where: <pre><code>$_SESSION = FnSession::getInstance();\n$_SESSION-&gt;setDatabase(FnDb::getInstance());\n$_SESSION-&gt;start();\n</code></pre></p> <p>This overrides PHP's <code>$_SESSION</code> superglobal with the custom <code>FnSession</code> instance.</p>"},{"location":"basics/session-management/#session-creation","title":"Session Creation","text":"<p>Sessions are created through: 1. A user logging in, where <code>auth_set_session()</code> populates the session 2. A new visitor generating a blank session with generated session ID 3. OAuth token verification creating a corresponding session</p>"},{"location":"basics/session-management/#session-validation","title":"Session Validation","text":"<ol> <li>The cookie contains a hash value calculated from the session data</li> <li>On each request, the hash is recalculated and compared with the stored hash</li> <li>If validation fails, a new session is created</li> </ol>"},{"location":"basics/session-management/#session-expiration-destruction","title":"Session Expiration &amp; Destruction","text":"<p>Sessions expire through: - Browser session ending (default) - Explicit cookie timeout when \"Remember Me\" is used - Forced expiration via the <code>sess_kick_[user_id]</code> mechanism in Redis</p>"},{"location":"basics/session-management/#security-features","title":"Security Features","text":"<p>The session management system implements several security features:</p> <ol> <li>Hash Validation: Ensures cookie data hasn't been tampered with</li> <li>Cookie Flags: Uses secure and HTTP-only flags when over HTTPS</li> <li>Domain Restrictions: Limits cookie availability to appropriate domains</li> <li>Remote Session Termination: Allows forcing users out via Redis cache</li> <li>OAuth Integration: Supports token-based authentication alongside cookie auth</li> </ol>"},{"location":"basics/session-management/#role-based-permission-system","title":"Role-Based Permission System","text":"<p>Sessions integrate with a role-based permission system: - Users are assigned roles stored in <code>sess_group_id</code> - Roles map to permissions (PROVIDER, ADMIN, STAFF, etc.) - Secondary roles can be added during a session using <code>addRole()</code> - Role checks are performed using <code>hasRole()</code></p>"},{"location":"basics/session-management/#integration-with-framework","title":"Integration with Framework","text":""},{"location":"basics/session-management/#context-object","title":"Context Object","text":"<p>The session data is available to the application through the Context object: <pre><code>$context-&gt;setSession($_SESSION);\n</code></pre></p>"},{"location":"basics/session-management/#rest-controllers","title":"REST Controllers","text":"<p>REST API controllers integrate session management with OAuth authentication: - Token verification creates/updates the corresponding session - Session data is used to authorize API requests</p>"},{"location":"basics/session-management/#oauth-and-token-based-authentication","title":"OAuth and Token-Based Authentication","text":"<p>The system supports both cookie-based and token-based authentication: - OAuth tokens can be converted to sessions using <code>applySessionFromAccessToken()</code> - Session data can be derived from valid JWT tokens</p>"},{"location":"basics/session-management/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Accessing Session Data <pre><code>// Preferred way to access session data\n$userId = $_SESSION['sess_user_id'];\n\n// Setting session data\n$_SESSION['custom_value'] = 'some data';\n</code></pre></p> </li> <li> <p>Session Expiration <pre><code>// Set \"Remember Me\" functionality (7 days)\n$_SESSION-&gt;setRememberMe(604800);\n</code></pre></p> </li> <li> <p>Role-Based Authorization <pre><code>if ($_SESSION-&gt;hasRole('ADMIN')) {\n    // Admin-specific functionality\n}\n</code></pre></p> </li> <li> <p>Session Cache Control <pre><code>// Prevent caching of sensitive pages\n$_SESSION-&gt;setCacheLimiter(FnSession::CACHE_NOCACHE);\n</code></pre></p> </li> <li> <p>Session Destruction <pre><code>// Log out by destroying the session\n$_SESSION-&gt;destroy();\n</code></pre></p> </li> </ol>"},{"location":"basics/session-management/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cookie data size is minimized by storing only essential user information</li> <li>Extended session data is cached in Redis for fast retrieval</li> <li>Features array is lazy-loaded only when needed</li> <li>Session data mutations are batched when using <code>setParameters()</code></li> </ul>"},{"location":"basics/session-management/#debugging-sessions","title":"Debugging Sessions","text":"<p>When <code>SYSCONF_DEBUG</code> is enabled or <code>$_SESSION['fn_debug']</code> is set: - The 'DEBUG' role is automatically added to the session - Database queries are logged via Doctrine's DebugStack - FnDb is placed in debug mode</p>"},{"location":"basics/validation/","title":"Validation","text":"<p>Data validation is an essential aspect of the FieldNation Filter Framework that ensures input data conforms to expected formats and rules before processing. The framework provides robust validation tools to verify user inputs, API requests, and other data sources.</p>"},{"location":"basics/validation/#validation-overview","title":"Validation Overview","text":""},{"location":"basics/validation/#purpose","title":"Purpose","text":"<p>Validation in the Filter Framework serves several key purposes:</p> <ol> <li>Security: Preventing malicious inputs and injection attacks</li> <li>Data integrity: Ensuring data meets required formats and constraints</li> <li>User experience: Providing meaningful feedback when inputs are invalid</li> </ol>"},{"location":"basics/validation/#validation-methods","title":"Validation Methods","text":""},{"location":"basics/validation/#request-validation","title":"Request Validation","text":"<p>The framework provides built-in methods for validating request inputs:</p> <pre><code>// Validating request parameters\npublic function save(Request $request)\n{\n    $validator = new \\FieldValidatorEmail(true);\n    if (!$validator-&gt;isValid($request-&gt;get('email'))) {\n        return $this-&gt;response-&gt;badRequest('The email address is not valid');\n    }\n\n    // Continue with save operation\n}\n</code></pre>"},{"location":"basics/validation/#form-validation","title":"Form Validation","text":"<p>For form submissions, the framework offers form-specific validation:</p> <pre><code>// Form validation example\n$email = $this-&gt;getParam('email');\n$validator = new \\FieldValidatorEmail(true);\n\nif (!$validator-&gt;isValid($email)) {\n    return $this-&gt;json([\n        'success' =&gt; false,\n        'message' =&gt; 'The email address you entered is not valid'\n    ]);\n}\n</code></pre>"},{"location":"basics/validation/#built-in-validators","title":"Built-in Validators","text":"<p>The Filter Framework includes several built-in validators:</p> Validator Purpose <code>FieldValidatorEmail</code> Validates email addresses <code>FieldValidatorPhone</code> Validates phone numbers <code>FieldValidatorNumeric</code> Ensures input is numeric <code>FieldValidatorUrl</code> Validates URLs <code>FieldValidatorDate</code> Validates date formats"},{"location":"basics/validation/#custom-validation","title":"Custom Validation","text":""},{"location":"basics/validation/#creating-custom-validators","title":"Creating Custom Validators","text":"<p>You can create custom validators by extending the base validator class:</p> <pre><code>class CustomValidator extends \\FieldValidator\n{\n    public function isValid($value)\n    {\n        // Implement custom validation logic\n        return $this-&gt;validateCustomRule($value);\n    }\n\n    private function validateCustomRule($value)\n    {\n        // Custom validation implementation\n        return true; // or false if invalid\n    }\n}\n</code></pre>"},{"location":"basics/validation/#chaining-validators","title":"Chaining Validators","text":"<p>Multiple validators can be chained to create complex validation rules:</p> <pre><code>$isValid = (new \\FieldValidatorNumeric())-&gt;isValid($value) \n    &amp;&amp; $value &gt;= 1 \n    &amp;&amp; $value &lt;= 100;\n</code></pre>"},{"location":"basics/validation/#validation-in-controllers","title":"Validation in Controllers","text":"<p>Controllers in the Filter Framework typically validate inputs before proceeding with business logic:</p> <pre><code>public function createLocation()\n{\n    $this-&gt;isRequired('EDIT_LOCATIONS');\n\n    $address = $this-&gt;getParam('address');\n    $city = $this-&gt;getParam('city');\n    $state = $this-&gt;getParam('state');\n    $zip = $this-&gt;getParam('zip');\n\n    // Validate required fields\n    if (empty($address) || empty($city) || empty($state) || empty($zip)) {\n        return $this-&gt;json([\n            'success' =&gt; false,\n            'message' =&gt; 'All address fields are required'\n        ]);\n    }\n\n    // Create location\n    $locationService = new LocationService($this-&gt;getContext());\n    $result = $locationService-&gt;createLocation([\n        'address' =&gt; $address,\n        'city' =&gt; $city,\n        'state' =&gt; $state,\n        'zip' =&gt; $zip\n    ]);\n\n    return $this-&gt;json($result);\n}\n</code></pre>"},{"location":"basics/validation/#error-handling","title":"Error Handling","text":""},{"location":"basics/validation/#collecting-validation-errors","title":"Collecting Validation Errors","text":"<p>When validating multiple fields, it's common to collect all validation errors:</p> <pre><code>public function validateUser($data)\n{\n    $errors = [];\n\n    $emailValidator = new \\FieldValidatorEmail(true);\n    if (!$emailValidator-&gt;isValid($data['email'])) {\n        $errors['email'] = 'Invalid email address';\n    }\n\n    if (strlen($data['password']) &lt; 8) {\n        $errors['password'] = 'Password must be at least 8 characters';\n    }\n\n    return empty($errors) ? true : $errors;\n}\n</code></pre>"},{"location":"basics/validation/#displaying-validation-errors","title":"Displaying Validation Errors","text":"<p>The framework makes it easy to return validation errors to the client:</p> <pre><code>$validationResult = $this-&gt;validateUser($request-&gt;getJson());\n\nif ($validationResult !== true) {\n    return $this-&gt;response-&gt;badRequest([\n        'success' =&gt; false,\n        'errors' =&gt; $validationResult\n    ]);\n}\n</code></pre>"},{"location":"basics/validation/#csrf-validation","title":"CSRF Validation","text":"<p>The framework includes CSRF protection for forms and state-changing operations:</p> <pre><code>public function save()\n{\n    $csrfCheckObj = new \\FieldNation\\Framework\\CsrfCheck();\n    if (!(bool)$csrfCheckObj-&gt;checkToken($this-&gt;getContext()-&gt;getRequest())) {\n        return $this-&gt;json([\n            'success' =&gt; false,\n            'message' =&gt; 'Invalid security token'\n        ]);\n    }\n\n    // Continue with save operation\n}\n</code></pre>"},{"location":"basics/validation/#best-practices","title":"Best Practices","text":"<ol> <li>Validate Early: Validate inputs as early as possible in the request lifecycle</li> <li>Be Specific: Use the most specific validator for each type of data</li> <li>Sanitize Inputs: Always sanitize data after validation before using it</li> <li>Meaningful Messages: Provide clear error messages to help users correct invalid inputs</li> <li>Server-Side First: Never rely on client-side validation alone</li> <li>Fail Fast: Return validation errors immediately rather than attempting to process invalid data</li> <li>Consistency: Use consistent validation patterns across your application</li> </ol>"},{"location":"basics/views-templates/","title":"Views and Templates in the Filter Framework","text":""},{"location":"crud/create/","title":"Creating Records with Filter Framework","text":"<p>The Filter Framework provides a structured approach to implement Create operations for your data entities. This document outlines the steps and components needed to implement creation functionality for your custom entities.</p>"},{"location":"crud/create/#overview","title":"Overview","text":"<p>Creating new records in the Filter Framework typically involves:</p> <ol> <li>Defining data model properties</li> <li>Creating a dedicated service for record creation</li> <li>Setting up a controller to handle creation requests</li> <li>Implementing proper validation and error handling</li> <li>Integrating with the database layer</li> </ol>"},{"location":"crud/create/#file-structure","title":"File Structure","text":"<p>Before implementation, understand the directory structure where your files should be placed:</p> <pre><code>fieldnation/\n\u251c\u2500\u2500 library/\n\u2502   \u2514\u2500\u2500 FieldNation/          # Core framework code\n\u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 YourModule/           # Your module code\n\u2502       \u251c\u2500\u2500 Controller/       # Controllers\n\u2502       \u251c\u2500\u2500 Factory/\n\u2502       \u2502   \u2514\u2500\u2500 Service/      # Service factories\n\u2502       \u251c\u2500\u2500 Model/            # Entity models\n\u2502       \u251c\u2500\u2500 ModelProperties/  # Properties for models\n\u2502       \u251c\u2500\u2500 Service/          # Service implementations\n\u2502       \u251c\u2500\u2500 Api/\n\u2502       \u2502   \u2514\u2500\u2500 v2/           # API controllers\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 routes.php        # Route definitions\n\u2502       \u2514\u2500\u2500 v2_api.php        # API route definitions\n\u2502\n\u2514\u2500\u2500 view/\n    \u2514\u2500\u2500 YourModule/           # Twig templates\n</code></pre>"},{"location":"crud/create/#implementation-process","title":"Implementation Process","text":""},{"location":"crud/create/#1-define-your-data-model","title":"1. Define Your Data Model","text":"<p>Before implementing creation functionality, define the data structure using model properties:</p> <pre><code>&lt;?php\nnamespace YourModule\\ModelProperties;\n\nuse Filter\\Component;\n\nclass YourEntityProperties\n{\n    public function defineProperties()\n    {\n        // Define properties for creation\n        return [\n            'name' =&gt; [\n                'type' =&gt; 'string',\n                'required' =&gt; true,\n                'validation' =&gt; 'notEmpty'\n            ],\n            'description' =&gt; [\n                'type' =&gt; 'string',\n                'required' =&gt; false\n            ],\n            'status_id' =&gt; [\n                'type' =&gt; 'integer',\n                'required' =&gt; true\n            ],\n            'created_date' =&gt; [\n                'type' =&gt; 'dateTime',\n                'defaultValue' =&gt; 'CURRENT_TIMESTAMP'\n            ]\n        ];\n    }\n}\n</code></pre> <p>For model properties in the Filter Framework, you typically create them in the <code>modules/YourModule/ModelProperties</code> directory. These properties define the data structure and validation rules for your entities.</p>"},{"location":"crud/create/#2-create-a-service-for-record-creation","title":"2. Create a Service for Record Creation","text":"<p>Create a dedicated service that handles the creation of new records. The services should be placed in the <code>modules/YourModule/Service</code> directory:</p> <pre><code>&lt;?php\nnamespace YourModule\\Service;\n\nuse FieldNation\\Framework\\Service;\nuse FieldNation\\Framework\\Service\\Traits;\n\nclass CreateEntity extends Service\n{\n    use Traits\\User; // For user validation\n\n    // Properties to be set by caller\n    protected $name;\n    protected $description;\n    protected $statusId;\n\n    /**\n     * Execute the creation process\n     * \n     * @return array Result with success/failure and new entity ID\n     */\n    public function execute()\n    {\n        // Validate the current user\n        $this-&gt;validateUser();\n\n        // Validate input data\n        $this-&gt;validateInputs();\n\n        // Begin transaction\n        $db = $this-&gt;get('db');\n        $db-&gt;beginTransaction();\n\n        try {\n            // Insert the record\n            $db-&gt;insert('your_entity_table', [\n                'name' =&gt; $this-&gt;name,\n                'description' =&gt; $this-&gt;description,\n                'status_id' =&gt; $this-&gt;statusId,\n                'created_by' =&gt; $this-&gt;get('userId'),\n                'company_id' =&gt; $this-&gt;get('companyId')\n            ]);\n\n            // Get the newly created entity ID\n            $entityId = $db-&gt;lastInsertId();\n\n            // Commit the transaction\n            $db-&gt;commit();\n\n            // Return success response\n            return [\n                'success' =&gt; true,\n                'entity_id' =&gt; $entityId\n            ];\n        } catch (\\Exception $e) {\n            // Rollback on error\n            $db-&gt;rollback();\n\n            // Return error response\n            return [\n                'success' =&gt; false,\n                'message' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    /**\n     * Validate the input data\n     */\n    protected function validateInputs()\n    {\n        if (empty($this-&gt;name)) {\n            throw new \\InvalidArgumentException('Name is required');\n        }\n\n        if (empty($this-&gt;statusId)) {\n            throw new \\InvalidArgumentException('Status ID is required');\n        }\n    }\n\n    // Setters for properties\n    public function setName($name)\n    {\n        $this-&gt;name = $name;\n        return $this;\n    }\n\n    public function setDescription($description)\n    {\n        $this-&gt;description = $description;\n        return $this;\n    }\n\n    public function setStatusId($statusId)\n    {\n        $this-&gt;statusId = (int)$statusId;\n        return $this;\n    }\n}\n</code></pre>"},{"location":"crud/create/#3-create-a-factory-for-your-service","title":"3. Create a Factory for Your Service","text":"<p>Register a factory to create your service. The factory should be placed in the <code>modules/YourModule/Factory/Service</code> directory:</p> <pre><code>&lt;?php\nnamespace YourModule\\Factory\\Service;\n\nuse FieldNation\\Framework\\ServiceManager;\nuse YourModule\\Service\\CreateEntity;\n\nclass CreateEntityFactory implements ServiceManager\\FactoryInterface\n{\n    public function create(ServiceManager\\Locator $app)\n    {\n        $service = new CreateEntity();\n        $service-&gt;setDb($app-&gt;get('db'));\n        $service-&gt;setUserId($app-&gt;get('userId'));\n        $service-&gt;setCompanyId($app-&gt;get('companyId'));\n\n        return $service;\n    }\n}\n</code></pre>"},{"location":"crud/create/#4-create-a-controller-for-handling-create-requests","title":"4. Create a Controller for Handling Create Requests","text":"<p>Define a controller to handle the creation requests. Create this file in the <code>modules/YourModule/Controller</code> directory:</p> <pre><code>&lt;?php\nnamespace YourModule\\Controller;\n\nuse FieldNation\\Framework\\Controller;\n\nclass EntityController extends Controller\n{\n    /**\n     * Create a new entity\n     */\n    public function create()\n    {\n        // Check permissions\n        $this-&gt;isRequired('CREATE_YOUR_ENTITY');\n\n        // Get request parameters\n        $params = $this-&gt;getContext()-&gt;getRequest();\n\n        // Create entity\n        $result = $this-&gt;get(\\YourModule\\Service\\CreateEntity::class)\n            -&gt;setName($params['name'])\n            -&gt;setDescription($params['description'] ?? '')\n            -&gt;setStatusId($params['status_id'])\n            -&gt;execute();\n\n        if ($result['success']) {\n            // Redirect to the newly created entity or return success\n            return $this-&gt;redirect('/your-module/entity/' . $result['entity_id']);\n        } else {\n            // Handle error case\n            return $this-&gt;render(\n                'your-module/create.html.twig',\n                [\n                    'error' =&gt; $result['message'],\n                    'formData' =&gt; $params\n                ]\n            );\n        }\n    }\n\n    /**\n     * Show the entity creation form\n     */\n    public function showCreateForm()\n    {\n        // Check permissions\n        $this-&gt;isRequired('CREATE_YOUR_ENTITY');\n\n        // Render the creation form\n        return $this-&gt;render(\n            'your-module/create.html.twig',\n            [\n                'statuses' =&gt; $this-&gt;get('statusService')-&gt;getAll()\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"crud/create/#5-register-routes-for-create-operations","title":"5. Register Routes for Create Operations","text":"<p>Add routes to handle the creation form and submission. Create or modify your module's <code>routes.php</code> file in the <code>modules/YourModule</code> directory:</p> <pre><code>&lt;?php\n// In your module's routes.php\nuse FieldNation\\Framework\\Route;\n\nreturn [\n    new Route(\n        'your-module/entity/create',\n        [\\YourModule\\Controller\\EntityController::class, 'showCreateForm'],\n        [],\n        ['methods' =&gt; ['GET']]\n    ),\n    new Route(\n        'your-module/entity/create',\n        [\\YourModule\\Controller\\EntityController::class, 'create'],\n        [],\n        ['methods' =&gt; ['POST']]\n    )\n];\n</code></pre>"},{"location":"crud/create/#6-create-a-form-template","title":"6. Create a Form Template","text":"<p>Create a Twig template for the creation form. Place this in the <code>view/your-module</code> directory:</p> <pre><code>{# your-module/create.html.twig #}\n{% extends layout|default('layout/app.html.twig') %}\n\n{% block title %}Create New Entity{% endblock %}\n\n{% block content %}\n&lt;div class=\"container\"&gt;\n    &lt;h1&gt;Create New Entity&lt;/h1&gt;\n\n    {% if error is defined and error %}\n        &lt;div class=\"alert alert-danger\"&gt;{{ error }}&lt;/div&gt;\n    {% endif %}\n\n    &lt;form method=\"post\" action=\"/your-module/entity/create\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" \n                   value=\"{{ formData.name|default('') }}\" required&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"description\"&gt;Description:&lt;/label&gt;\n            &lt;textarea class=\"form-control\" id=\"description\" name=\"description\"&gt;{{ formData.description|default('') }}&lt;/textarea&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"status_id\"&gt;Status:&lt;/label&gt;\n            &lt;select class=\"form-control\" id=\"status_id\" name=\"status_id\" required&gt;\n                &lt;option value=\"\"&gt;-- Select Status --&lt;/option&gt;\n                {% for status in statuses %}\n                    &lt;option value=\"{{ status.id }}\" \n                            {% if formData.status_id|default('') == status.id %}selected{% endif %}&gt;\n                        {{ status.name }}\n                    &lt;/option&gt;\n                {% endfor %}\n            &lt;/select&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Create&lt;/button&gt;\n        &lt;a href=\"/your-module/entities\" class=\"btn btn-secondary\"&gt;Cancel&lt;/a&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre>"},{"location":"crud/create/#integrating-with-the-filter-framework","title":"Integrating with the Filter Framework","text":""},{"location":"crud/create/#using-the-rest-api-for-creation","title":"Using the REST API for Creation","text":"<p>For API-based creation, implement a REST controller in the <code>modules/YourModule/Api/v2</code> directory:</p> <pre><code>&lt;?php\nnamespace YourModule\\Api\\v2;\n\nuse FieldNation\\Framework\\RestController;\n\nclass EntityController extends RestController\n{\n    /**\n     * Create a new entity via API\n     * \n     * @return \\FieldNation\\Framework\\Response\\Json\n     */\n    public function create()\n    {\n        // Check authorization\n        $this-&gt;isGranted();\n\n        // Get JSON request body\n        $params = $this-&gt;getJsonParams();\n\n        // Validate required fields\n        if (empty($params['name']) || empty($params['status_id'])) {\n            return $this-&gt;error('Name and status_id are required fields');\n        }\n\n        // Create entity\n        $result = $this-&gt;get(\\YourModule\\Service\\CreateEntity::class)\n            -&gt;setName($params['name'])\n            -&gt;setDescription($params['description'] ?? '')\n            -&gt;setStatusId($params['status_id'])\n            -&gt;execute();\n\n        if ($result['success']) {\n            // Return the newly created entity\n            return $this-&gt;json([\n                'success' =&gt; true,\n                'entity_id' =&gt; $result['entity_id']\n            ]);\n        } else {\n            // Return error\n            return $this-&gt;error($result['message']);\n        }\n    }\n}\n</code></pre> <p>Register the API route in your module's <code>v2_api.php</code> file:</p> <pre><code>&lt;?php\n// In your module's v2_api.php\nuse FieldNation\\Framework\\Route;\n\nreturn [\n    new Route(\n        'api/v2/your-module/entities',\n        [\\YourModule\\Api\\v2\\EntityController::class, 'create'],\n        [],\n        ['methods' =&gt; ['POST']]\n    )\n];\n</code></pre> <p>For more comprehensive API implementations, you might want to utilize the RouteBuilder helper:</p> <pre><code>&lt;?php\n// In your module's v2_api.php\nuse FieldNation\\Framework\\Route;\nrequire_once(__DIR__ . '/../Filter/Service/v2/RouteBuilder.php');\n\nreturn array_merge(\n    \\Filter\\Service\\v2\\RouteBuilder::build('your-module/entities', \\YourModule\\Api\\v2\\EntityController::class),\n    // Additional routes...\n);\n</code></pre>"},{"location":"crud/create/#integration-with-angular-frontend","title":"Integration with Angular Frontend","text":"<p>If using Angular for the frontend, here's how you can integrate with your create API:</p> <pre><code>// In your Angular controller\napp.controller('CreateEntityController', ['$scope', '$http', '$location', \n    function($scope, $http, $location) {\n        $scope.entity = {};\n        $scope.statuses = [];\n        $scope.loading = false;\n        $scope.error = null;\n\n        // Load statuses for dropdown\n        $http.get('/api/v2/statuses').then(function(response) {\n            $scope.statuses = response.data;\n        });\n\n        // Create entity function\n        $scope.createEntity = function() {\n            $scope.loading = true;\n            $scope.error = null;\n\n            $http.post('/api/v2/your-module/entities', $scope.entity)\n                .then(function(response) {\n                    if (response.data.success) {\n                        // Redirect to the entity list or detail page\n                        $location.path('/your-module/entities/' + response.data.entity_id);\n                    } else {\n                        $scope.error = response.data.message || 'Failed to create entity';\n                    }\n                    $scope.loading = false;\n                })\n                .catch(function(error) {\n                    $scope.error = error.data &amp;&amp; error.data.message \n                        ? error.data.message \n                        : 'An error occurred while creating the entity';\n                    $scope.loading = false;\n                });\n        };\n    }\n]);\n</code></pre> <p>The corresponding Angular view template could look like this:</p> <pre><code>&lt;!-- In your HTML template --&gt;\n&lt;div class=\"create-entity-container\"&gt;\n  &lt;h2&gt;Create New Entity&lt;/h2&gt;\n\n  &lt;div class=\"alert alert-danger\" ng-if=\"error\"&gt;\n    {{ error }}\n  &lt;/div&gt;\n\n  &lt;form name=\"createEntityForm\" ng-submit=\"createEntity()\" novalidate&gt;\n    &lt;div class=\"form-group\"&gt;\n      &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n      &lt;input type=\"text\" id=\"name\" class=\"form-control\" \n             ng-model=\"entity.name\" required&gt;\n      &lt;div class=\"error\" ng-show=\"createEntityForm.name.$dirty &amp;&amp; createEntityForm.name.$invalid\"&gt;\n        Name is required\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n      &lt;label for=\"description\"&gt;Description&lt;/label&gt;\n      &lt;textarea id=\"description\" class=\"form-control\" \n                ng-model=\"entity.description\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n      &lt;label for=\"status\"&gt;Status&lt;/label&gt;\n      &lt;select id=\"status\" class=\"form-control\" \n              ng-model=\"entity.status_id\" required\n              ng-options=\"status.id as status.name for status in statuses\"&gt;\n        &lt;option value=\"\"&gt;-- Select Status --&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;div class=\"error\" ng-show=\"createEntityForm.status_id.$dirty &amp;&amp; createEntityForm.status_id.$invalid\"&gt;\n        Status is required\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-actions\"&gt;\n      &lt;button type=\"submit\" class=\"btn btn-primary\" \n              ng-disabled=\"createEntityForm.$invalid || loading\"&gt;\n        &lt;i class=\"fa fa-spinner fa-spin\" ng-if=\"loading\"&gt;&lt;/i&gt;\n        Create\n      &lt;/button&gt;\n      &lt;a href=\"#/your-module/entities\" class=\"btn btn-default\"&gt;Cancel&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"crud/create/#error-handling-and-validation","title":"Error Handling and Validation","text":"<p>For robust creation functionality, implement proper validation:</p> <ol> <li>Input Validation: Validate all input fields before attempting to create a record</li> <li>Use type validation (<code>shouldBeString()</code>, <code>shouldBeNumber()</code>, etc.)</li> <li>Check for required fields</li> <li> <p>Validate format (email, phone, etc.)</p> </li> <li> <p>Permission Checks: Ensure the user has the proper permissions</p> </li> <li>Use <code>isRequired()</code> in controllers</li> <li>Use <code>isGranted()</code> in REST controllers</li> <li> <p>Implement row-level permissions if needed</p> </li> <li> <p>Database Transactions: Use transactions to ensure data consistency</p> </li> <li>Begin transaction before operations</li> <li>Commit only after all operations succeed</li> <li> <p>Roll back on any failure</p> </li> <li> <p>Error Messages: Provide meaningful error messages for users</p> </li> <li>Be specific about what failed</li> <li>Avoid exposing system details</li> <li> <p>Consider internationalization</p> </li> <li> <p>Logging: Log errors for debugging purposes</p> </li> <li>Include context for troubleshooting</li> <li>Log user actions for audit</li> </ol>"},{"location":"crud/create/#best-practices","title":"Best Practices","text":"<ol> <li>Separate Concerns: Keep creation logic separate from filtering logic</li> <li>Use dedicated services for create operations</li> <li> <p>Don't mix CRUD operations in a single service</p> </li> <li> <p>Use Services: Encapsulate creation logic in dedicated services</p> </li> <li>Follow the Service pattern with proper factories</li> <li> <p>Implement the <code>execute()</code> method for consistency</p> </li> <li> <p>Parameterized Queries: Use parameterized queries to prevent SQL injection</p> </li> <li>Never concatenate user input into SQL</li> <li> <p>Use the framework's database abstraction methods</p> </li> <li> <p>ACL Integration: Integrate with the ACL system for permissions</p> </li> <li>Define clear permission requirements in your controllers</li> <li> <p>Implement row-level permissions when necessary</p> </li> <li> <p>Event Logging: Log creation events for audit purposes</p> </li> <li>Record who created what and when</li> <li> <p>Include enough context for accountability</p> </li> <li> <p>Validation Rules: Define clear validation rules for each field</p> </li> <li>Document validation constraints for API consumers</li> <li>Provide helpful validation error messages</li> </ol>"},{"location":"crud/create/#related-documentation","title":"Related Documentation","text":"<ul> <li>Filter Framework Overview</li> <li>Implementation Guide</li> <li>Filter Templates</li> <li>Filter Plugins</li> <li>Controllers</li> <li>Services</li> <li>Directory Structure</li> <li>Validation</li> <li>Request Lifecycle</li> <li>Component Model</li> </ul>"},{"location":"crud/create/#example-implementing-a-custom-field-creator","title":"Example: Implementing a Custom Field Creator","text":"<p>Here's a complete example for creating custom fields using the Filter Framework:</p> <pre><code>&lt;?php\nnamespace CustomFields\\Service;\n\nuse FieldNation\\Framework\\Service;\nuse FieldNation\\Framework\\Service\\Traits;\n\nclass CreateCustomField extends Service\n{\n    use Traits\\User;\n\n    // Properties for custom field creation\n    protected $name;\n    protected $type;\n    protected $required = false;\n    protected $unique = false;\n    protected $tip;\n    protected $category;\n    protected $forProvider = false;\n    protected $visibleToClients = false;\n    protected $shownInHeader = false;\n    protected $includeInAlerts = false;\n    protected $options = [];\n\n    /**\n     * Execute the creation of a custom field\n     * \n     * @return array Result with success/failure and new custom field ID\n     */\n    public function execute()\n    {\n        // Validate user permissions\n        $this-&gt;validateUser();\n\n        // Validate required input\n        if (empty($this-&gt;name)) {\n            throw new \\InvalidArgumentException('Custom field name is required');\n        }\n\n        if (empty($this-&gt;type)) {\n            throw new \\InvalidArgumentException('Custom field type is required');\n        }\n\n        // Begin transaction\n        $db = $this-&gt;get('db');\n        $db-&gt;beginTransaction();\n\n        try {\n            // Insert the custom field\n            $db-&gt;insert('workorder_custom_labels', [\n                'company_id' =&gt; $this-&gt;get('companyId'),\n                'label' =&gt; $this-&gt;name,\n                'tip' =&gt; $this-&gt;tip,\n                'data_field_type' =&gt; $this-&gt;type,\n                'required' =&gt; $this-&gt;required ? 1 : 0,\n                'unique' =&gt; $this-&gt;unique ? 1 : 0,\n                'fortech' =&gt; $this-&gt;forProvider ? 1 : 0,\n                'hide_from_tech' =&gt; $this-&gt;forProvider ? 0 : 1,\n                'in_alerts' =&gt; $this-&gt;includeInAlerts ? 1 : 0,\n                'show_in_wo_details_header' =&gt; $this-&gt;shownInHeader ? 1 : 0, \n                'visible_to_clients' =&gt; $this-&gt;visibleToClients ? 1 : 0,\n                'created_by' =&gt; $this-&gt;get('userId'),\n                'created_date' =&gt; date('Y-m-d H:i:s')\n            ]);\n\n            // Get the newly created custom field ID\n            $customFieldId = $db-&gt;lastInsertId();\n\n            // Add options for predefined (dropdown) type fields\n            if ($this-&gt;type === 'predefined' &amp;&amp; !empty($this-&gt;options)) {\n                foreach ($this-&gt;options as $index =&gt; $option) {\n                    $db-&gt;insert('custom_label_value_choices', [\n                        'custom_label_id' =&gt; $customFieldId,\n                        'value' =&gt; $option,\n                        'value_order' =&gt; $index\n                    ]);\n                }\n            }\n\n            // Add configuration entry to make the field visible in UI\n            $db-&gt;insert('workorder_configuration', [\n                'company_id' =&gt; $this-&gt;get('companyId'),\n                'client_company_id' =&gt; 0,\n                'workorder_group_id' =&gt; 0,\n                'workorder_id' =&gt; 0,\n                'option_category' =&gt; 1, // Custom field category\n                'option_name' =&gt; $customFieldId,\n                'option_value' =&gt; 1\n            ]);\n\n            // Commit the transaction\n            $db-&gt;commit();\n\n            return [\n                'success' =&gt; true,\n                'custom_field_id' =&gt; $customFieldId\n            ];\n        } catch (\\Exception $e) {\n            // Rollback on error\n            $db-&gt;rollback();\n\n            return [\n                'success' =&gt; false,\n                'message' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    // Setters with fluent interface\n    public function setName($name)\n    {\n        $this-&gt;name = $name;\n        return $this;\n    }\n\n    public function setType($type)\n    {\n        $this-&gt;type = $type;\n        return $this;\n    }\n\n    public function setRequired($required)\n    {\n        $this-&gt;required = (bool)$required;\n        return $this;\n    }\n\n    public function setUnique($unique)\n    {\n        $this-&gt;unique = (bool)$unique;\n        return $this;\n    }\n\n    public function setTip($tip)\n    {\n        $this-&gt;tip = $tip;\n        return $this;\n    }\n\n    public function setCategory($category)\n    {\n        $this-&gt;category = $category;\n        return $this;\n    }\n\n    public function setForProvider($forProvider)\n    {\n        $this-&gt;forProvider = (bool)$forProvider;\n        return $this;\n    }\n\n    public function setVisibleToClients($visible)\n    {\n        $this-&gt;visibleToClients = (bool)$visible;\n        return $this;\n    }\n\n    public function setShownInHeader($shown)\n    {\n        $this-&gt;shownInHeader = (bool)$shown;\n        return $this;\n    }\n\n    public function setIncludeInAlerts($include)\n    {\n        $this-&gt;includeInAlerts = (bool)$include;\n        return $this;\n    }\n\n    public function setOptions(array $options)\n    {\n        $this-&gt;options = $options;\n        return $this;\n    }\n}\n</code></pre>"},{"location":"crud/create/#using-the-custom-field-creator","title":"Using the Custom Field Creator","text":"<p>To use the custom field creator service:</p> <pre><code>&lt;?php\n// In a controller or another service\n$result = $this-&gt;get(\\CustomFields\\Service\\CreateCustomField::class)\n    -&gt;setName('Inspection Date')\n    -&gt;setType('date')\n    -&gt;setTip('Date when the site was inspected')\n    -&gt;setRequired(true)\n    -&gt;setForProvider(true)\n    -&gt;setShownInHeader(true)\n    -&gt;execute();\n\nif ($result['success']) {\n    // Custom field created successfully\n    $customFieldId = $result['custom_field_id'];\n    // Perform any follow-up actions\n} else {\n    // Handle error\n    $errorMessage = $result['message'];\n}\n</code></pre> <p>For dropdown fields:</p> <pre><code>$result = $this-&gt;get(\\CustomFields\\Service\\CreateCustomField::class)\n    -&gt;setName('Priority')\n    -&gt;setType('predefined')\n    -&gt;setTip('Work order priority level')\n    -&gt;setOptions([\n        'Low',\n        'Medium', \n        'High', \n        'Critical'\n    ])\n    -&gt;execute();\n</code></pre>"},{"location":"database/migrations/","title":"File: /filter-framework-docs/filter-framework-docs/docs/database/migrations.md","text":""},{"location":"database/migrations/#database-migrations","title":"Database Migrations","text":"<p>Database migrations are a way to manage changes to your database schema over time. They allow you to define the structure of your database in a version-controlled manner, making it easier to collaborate with other developers and maintain consistency across different environments.</p>"},{"location":"database/migrations/#creating-migrations","title":"Creating Migrations","text":"<p>To create a new migration, you can use the command line tool provided by the framework. The basic syntax is:</p> <pre><code>php artisan make:migration create_table_name\n</code></pre> <p>This command will generate a new migration file in the <code>database/migrations</code> directory.</p>"},{"location":"database/migrations/#migration-structure","title":"Migration Structure","text":"<p>Each migration file contains two main methods:</p> <ul> <li><code>up()</code>: This method is used to define the changes that should be made to the database when the migration is applied.</li> <li><code>down()</code>: This method is used to reverse the changes made by the <code>up()</code> method.</li> </ul>"},{"location":"database/migrations/#example-migration","title":"Example Migration","text":"<p>Here is an example of a migration that creates a <code>users</code> table:</p> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsersTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('name');\n            $table-&gt;string('email')-&gt;unique();\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n</code></pre>"},{"location":"database/migrations/#running-migrations","title":"Running Migrations","text":"<p>To apply the migrations to your database, you can run the following command:</p> <pre><code>php artisan migrate\n</code></pre> <p>This command will execute all pending migrations in the order they were created.</p>"},{"location":"database/migrations/#rollback-migrations","title":"Rollback Migrations","text":"<p>If you need to revert the last batch of migrations, you can use the rollback command:</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>This will call the <code>down()</code> method on the last batch of migrations that were run.</p>"},{"location":"database/migrations/#conclusion","title":"Conclusion","text":"<p>Using migrations helps ensure that your database schema is consistent across different environments and makes it easier to manage changes over time. Always remember to create a migration whenever you make changes to your database structure.</p>"},{"location":"database/query-builder/","title":"Query Builder","text":"<p>The Query Builder provides a convenient, fluent interface to creating and running database queries. It allows you to build complex SQL queries programmatically without needing to write raw SQL.</p>"},{"location":"database/query-builder/#basic-usage","title":"Basic Usage","text":"<p>To get started with the Query Builder, you can use the following syntax:</p> <pre><code>use YourFramework\\Database\\QueryBuilder;\n\n$query = new QueryBuilder();\n\n// Select all records from a table\n$results = $query-&gt;table('users')-&gt;get();\n</code></pre>"},{"location":"database/query-builder/#building-queries","title":"Building Queries","text":"<p>You can build queries using various methods provided by the Query Builder:</p>"},{"location":"database/query-builder/#select","title":"Select","text":"<p>To select specific columns, you can use the <code>select</code> method:</p> <pre><code>$users = $query-&gt;table('users')-&gt;select('name', 'email')-&gt;get();\n</code></pre>"},{"location":"database/query-builder/#where-clauses","title":"Where Clauses","text":"<p>You can add conditions to your queries using the <code>where</code> method:</p> <pre><code>$activeUsers = $query-&gt;table('users')-&gt;where('active', 1)-&gt;get();\n</code></pre>"},{"location":"database/query-builder/#ordering-results","title":"Ordering Results","text":"<p>To order the results, use the <code>orderBy</code> method:</p> <pre><code>$orderedUsers = $query-&gt;table('users')-&gt;orderBy('created_at', 'desc')-&gt;get();\n</code></pre>"},{"location":"database/query-builder/#inserting-data","title":"Inserting Data","text":"<p>To insert new records into a table, use the <code>insert</code> method:</p> <pre><code>$query-&gt;table('users')-&gt;insert([\n    'name' =&gt; 'John Doe',\n    'email' =&gt; 'john@example.com',\n]);\n</code></pre>"},{"location":"database/query-builder/#updating-records","title":"Updating Records","text":"<p>To update existing records, use the <code>update</code> method:</p> <pre><code>$query-&gt;table('users')-&gt;where('id', 1)-&gt;update(['active' =&gt; 0]);\n</code></pre>"},{"location":"database/query-builder/#deleting-records","title":"Deleting Records","text":"<p>To delete records, use the <code>delete</code> method:</p> <pre><code>$query-&gt;table('users')-&gt;where('id', 1)-&gt;delete();\n</code></pre>"},{"location":"database/query-builder/#conclusion","title":"Conclusion","text":"<p>The Query Builder is a powerful tool that simplifies database interactions. By using its fluent interface, you can easily construct and execute queries while maintaining readability and flexibility in your code.</p>"},{"location":"database/seeders/","title":"Seeders","text":"<p>This file provides information about seeders in the Filter Framework. Seeders are used to populate the database with initial data for testing or development purposes.</p>"},{"location":"database/seeders/#what-are-seeders","title":"What are Seeders?","text":"<p>Seeders are classes that allow you to insert data into your database tables. They are particularly useful for populating your database with sample data during development or testing.</p>"},{"location":"database/seeders/#creating-a-seeder","title":"Creating a Seeder","text":"<p>To create a new seeder, you can use the command line to generate a seeder class. For example:</p> <pre><code>php artisan make:seeder UserSeeder\n</code></pre> <p>This command will create a new seeder class in the <code>database/seeders</code> directory.</p>"},{"location":"database/seeders/#running-seeders","title":"Running Seeders","text":"<p>Once you have created your seeders, you can run them using the following command:</p> <pre><code>php artisan db:seed\n</code></pre> <p>This command will execute all seeders defined in your <code>DatabaseSeeder</code> class.</p>"},{"location":"database/seeders/#example-seeder","title":"Example Seeder","text":"<p>Here is an example of a simple seeder that inserts a user into the database:</p> <pre><code>use Illuminate\\Database\\Seeder;\nuse App\\Models\\User;\n\nclass UserSeeder extends Seeder\n{\n    public function run()\n    {\n        User::create([\n            'name' =&gt; 'John Doe',\n            'email' =&gt; 'john@example.com',\n            'password' =&gt; bcrypt('password'),\n        ]);\n    }\n}\n</code></pre>"},{"location":"database/seeders/#conclusion","title":"Conclusion","text":"<p>Seeders are a powerful tool for managing your database during development. They allow you to easily populate your database with the necessary data to test your application effectively.</p>"},{"location":"database/validation/","title":"File: /filter-framework-docs/filter-framework-docs/docs/database/validation.md","text":""},{"location":"database/validation/#validation-in-the-database-context","title":"Validation in the Database Context","text":"<p>Validation is a crucial aspect of database interactions in the Filter Framework. It ensures that the data being processed meets the required criteria before it is stored in the database. This document outlines the validation mechanisms available within the framework.</p>"},{"location":"database/validation/#overview","title":"Overview","text":"<p>The validation process helps maintain data integrity and prevents invalid data from being saved. It can be applied at various levels, including:</p> <ul> <li>Model Level: Validation rules can be defined within the model itself, ensuring that any data being saved adheres to the specified rules.</li> <li>Form Level: When handling user input, validation can be performed to ensure that the data submitted through forms is valid before processing.</li> </ul>"},{"location":"database/validation/#validation-rules","title":"Validation Rules","text":"<p>The framework supports a variety of validation rules, including but not limited to:</p> <ul> <li>Required: Ensures that a field is not empty.</li> <li>Email: Validates that the input is a valid email address.</li> <li>Unique: Checks that the value is unique in the specified database table.</li> <li>Min/Max Length: Validates the length of the input against specified minimum and maximum values.</li> <li>Custom Rules: Developers can define custom validation rules as needed.</li> </ul>"},{"location":"database/validation/#implementing-validation","title":"Implementing Validation","text":"<p>To implement validation in your models, you can define rules in the model class. Here\u2019s an example:</p> <pre><code>class User extends Model {\n    protected $rules = [\n        'name' =&gt; 'required|min:3|max:50',\n        'email' =&gt; 'required|email|unique:users,email',\n        'password' =&gt; 'required|min:6',\n    ];\n}\n</code></pre>"},{"location":"database/validation/#handling-validation-errors","title":"Handling Validation Errors","text":"<p>When validation fails, the framework provides mechanisms to handle errors gracefully. You can retrieve error messages and display them to the user, ensuring a smooth user experience.</p>"},{"location":"database/validation/#conclusion","title":"Conclusion","text":"<p>Validation is an essential part of working with databases in the Filter Framework. By implementing robust validation rules, you can ensure that your application maintains data integrity and provides a better experience for users.</p>"}]}